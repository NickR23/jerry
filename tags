!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	qualified	/Include an extra class-qualified tag entry for each tag/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	access	/Access (or export) of class members/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	inherits	/Inheritance information/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	signature	/Signature of routine (e.g. prototype or parameter list)/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C++	M,module	/modules/
!_TAG_KIND_DESCRIPTION!C++	P,partition	/partitions/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	p,prototype	/function prototypes/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!CMake	D,option	/options specified with -D/
!_TAG_KIND_DESCRIPTION!CMake	f,function	/functions/
!_TAG_KIND_DESCRIPTION!CMake	m,macro	/macros/
!_TAG_KIND_DESCRIPTION!CMake	p,project	/projects/
!_TAG_KIND_DESCRIPTION!CMake	t,target	/targets/
!_TAG_KIND_DESCRIPTION!CMake	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!D	M,module	/modules/
!_TAG_KIND_DESCRIPTION!D	T,template	/templates/
!_TAG_KIND_DESCRIPTION!D	V,version	/version statements/
!_TAG_KIND_DESCRIPTION!D	X,mixin	/mixins/
!_TAG_KIND_DESCRIPTION!D	a,alias	/aliases/
!_TAG_KIND_DESCRIPTION!D	c,class	/classes/
!_TAG_KIND_DESCRIPTION!D	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!D	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!D	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!D	i,interface	/interfaces/
!_TAG_KIND_DESCRIPTION!D	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!D	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!D	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!D	u,union	/union names/
!_TAG_KIND_DESCRIPTION!D	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!JSON	a,array	/arrays/
!_TAG_KIND_DESCRIPTION!JSON	b,boolean	/booleans/
!_TAG_KIND_DESCRIPTION!JSON	n,number	/numbers/
!_TAG_KIND_DESCRIPTION!JSON	o,object	/objects/
!_TAG_KIND_DESCRIPTION!JSON	s,string	/strings/
!_TAG_KIND_DESCRIPTION!JSON	z,null	/nulls/
!_TAG_KIND_DESCRIPTION!Make	I,makefile	/makefiles/
!_TAG_KIND_DESCRIPTION!Make	m,macro	/macros/
!_TAG_KIND_DESCRIPTION!Make	t,target	/targets/
!_TAG_KIND_DESCRIPTION!Markdown	S,subsection	/level 2 sections/
!_TAG_KIND_DESCRIPTION!Markdown	T,l4subsection	/level 4 sections/
!_TAG_KIND_DESCRIPTION!Markdown	c,chapter	/chapters/
!_TAG_KIND_DESCRIPTION!Markdown	h,hashtag	/hashtags/
!_TAG_KIND_DESCRIPTION!Markdown	n,footnote	/footnotes/
!_TAG_KIND_DESCRIPTION!Markdown	s,section	/sections/
!_TAG_KIND_DESCRIPTION!Markdown	t,subsubsection	/level 3 sections/
!_TAG_KIND_DESCRIPTION!Markdown	u,l5subsection	/level 5 sections/
!_TAG_KIND_DESCRIPTION!Sh	a,alias	/aliases/
!_TAG_KIND_DESCRIPTION!Sh	f,function	/functions/
!_TAG_KIND_DESCRIPTION!Sh	h,heredoc	/label for here document/
!_TAG_KIND_DESCRIPTION!Sh	s,script	/script files/
!_TAG_KIND_DESCRIPTION!TypeScript	C,constant	/constants/
!_TAG_KIND_DESCRIPTION!TypeScript	G,generator	/generators/
!_TAG_KIND_DESCRIPTION!TypeScript	a,alias	/aliases/
!_TAG_KIND_DESCRIPTION!TypeScript	c,class	/classes/
!_TAG_KIND_DESCRIPTION!TypeScript	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!TypeScript	f,function	/functions/
!_TAG_KIND_DESCRIPTION!TypeScript	g,enum	/enums/
!_TAG_KIND_DESCRIPTION!TypeScript	i,interface	/interfaces/
!_TAG_KIND_DESCRIPTION!TypeScript	m,method	/methods/
!_TAG_KIND_DESCRIPTION!TypeScript	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!TypeScript	p,property	/properties/
!_TAG_KIND_DESCRIPTION!TypeScript	v,variable	/variables/
!_TAG_KIND_DESCRIPTION!Yaml	a,anchor	/anchors/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C++	1.1	/current.age/
!_TAG_PARSER_VERSION!CMake	0.0	/current.age/
!_TAG_PARSER_VERSION!D	0.0	/current.age/
!_TAG_PARSER_VERSION!JSON	0.0	/current.age/
!_TAG_PARSER_VERSION!Make	1.1	/current.age/
!_TAG_PARSER_VERSION!Markdown	1.1	/current.age/
!_TAG_PARSER_VERSION!Sh	0.0	/current.age/
!_TAG_PARSER_VERSION!TypeScript	0.0	/current.age/
!_TAG_PARSER_VERSION!Yaml	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/Users/nr/projects/jerry/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	//
!_TAG_ROLE_DESCRIPTION!C++!header	exported	/exported with "exported imported ..."/
!_TAG_ROLE_DESCRIPTION!C++!header	imported	/imported with "imported ..."/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!C++!module	imported	/imported with "imported ..."/
!_TAG_ROLE_DESCRIPTION!C++!module	partOwner	/used for specifying a partition/
!_TAG_ROLE_DESCRIPTION!C++!partition	imported	/imported with "imported ..."/
!_TAG_ROLE_DESCRIPTION!Make!makefile	included	/included/
!_TAG_ROLE_DESCRIPTION!Make!makefile	optional	/optionally included/
!_TAG_ROLE_DESCRIPTION!Sh!heredoc	endmarker	/end marker/
!_TAG_ROLE_DESCRIPTION!Sh!script	loaded	/loaded/
!_TAG_ROLE_DESCRIPTION!Yaml!anchor	alias	/alias/
$(VERBOSE).SILENT	build/Makefile	/^$(VERBOSE).SILENT:$/;"	t
$(VERBOSE)MAKESILENT	build/Makefile	/^$(VERBOSE)MAKESILENT = -s$/;"	m
%	build/Makefile	/^% : %,v$/;"	t
%	build/Makefile	/^% : RCS\/%$/;"	t
%	build/Makefile	/^% : RCS\/%,v$/;"	t
%	build/Makefile	/^% : SCCS\/s.%$/;"	t
%	build/Makefile	/^% : s.%$/;"	t
0	.vscode/launch.json	/^                {$/;"	o	array:configurations.2.setupCommands
0	.vscode/launch.json	/^        {$/;"	o	array:configurations
0	.vscode/tasks.json	/^                "--build",$/;"	s	array:tasks.1.args
0	.vscode/tasks.json	/^                "--test-dir",$/;"	s	array:tasks.2.args
0	.vscode/tasks.json	/^                "-B",$/;"	s	array:tasks.0.args
0	.vscode/tasks.json	/^                "CMake: build"$/;"	s	array:tasks.2.dependsOn
0	.vscode/tasks.json	/^                "CMake: configure"$/;"	s	array:tasks.1.dependsOn
0	.vscode/tasks.json	/^        {$/;"	o	array:tasks
1	.vscode/launch.json	/^        {$/;"	o	array:configurations
1	.vscode/tasks.json	/^                "${workspaceFolder}\/build"$/;"	s	array:tasks.1.args
1	.vscode/tasks.json	/^                "${workspaceFolder}\/build"$/;"	s	array:tasks.2.args
1	.vscode/tasks.json	/^                "${workspaceFolder}\/build",$/;"	s	array:tasks.0.args
1	.vscode/tasks.json	/^        {$/;"	o	array:tasks
2	.vscode/launch.json	/^        {$/;"	o	array:configurations
2	.vscode/tasks.json	/^                "-S",$/;"	s	array:tasks.0.args
2	.vscode/tasks.json	/^        {$/;"	o	array:tasks
3	.vscode/tasks.json	/^                "${workspaceFolder}"$/;"	s	array:tasks.0.args
ARCHITECTURE_ID	build/CMakeFiles/3.31.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.31.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.31.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define ARCHITECTURE_ID$/;"	d	file:
ArrayEnd	src/JsonToken.h	/^        ArrayEnd,$/;"	e	enum:jerry::JsonTokenType	access:public
ArrayStart	src/JsonToken.h	/^        ArrayStart,$/;"	e	enum:jerry::JsonTokenType	access:public
Boolean	src/JsonToken.h	/^        Boolean,$/;"	e	enum:jerry::JsonTokenType	access:public
CMAKE_AR	build/CMakeFiles/3.31.3/CMakeCXXCompiler.cmake	/^set(CMAKE_AR "\/Applications\/Xcode.app\/Contents\/Developer\/Toolchains\/XcodeDefault.xctoolcha/;"	v
CMAKE_BINARY_DIR	build/Makefile	/^CMAKE_BINARY_DIR = \/Users\/nr\/projects\/jerry\/build$/;"	m
CMAKE_CL_SHOWINCLUDES_PREFIX	build/CMakeFiles/3.31.3/CMakeCXXCompiler.cmake	/^  set(CMAKE_CL_SHOWINCLUDES_PREFIX "${CMAKE_CXX_CL_SHOWINCLUDES_PREFIX}")$/;"	v
CMAKE_COMMAND	build/Makefile	/^CMAKE_COMMAND = \/opt\/homebrew\/bin\/cmake$/;"	m
CMAKE_COMPILER_IS_GNUCXX	build/CMakeFiles/3.31.3/CMakeCXXCompiler.cmake	/^set(CMAKE_COMPILER_IS_GNUCXX )$/;"	v
CMAKE_CROSSCOMPILING	build/CMakeFiles/3.31.3/CMakeSystem.cmake	/^set(CMAKE_CROSSCOMPILING "FALSE")$/;"	v
CMAKE_CROSSCOMPILING	build/cmake_install.cmake	/^  set(CMAKE_CROSSCOMPILING "FALSE")$/;"	v
CMAKE_CXX11_COMPILE_FEATURES	build/CMakeFiles/3.31.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX11_COMPILE_FEATURES "cxx_std_11;cxx_alias_templates;cxx_alignas;cxx_alignof;cxx_att/;"	v
CMAKE_CXX14_COMPILE_FEATURES	build/CMakeFiles/3.31.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX14_COMPILE_FEATURES "cxx_std_14;cxx_aggregate_default_initializers;cxx_attribute_de/;"	v
CMAKE_CXX17_COMPILE_FEATURES	build/CMakeFiles/3.31.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX17_COMPILE_FEATURES "cxx_std_17")$/;"	v
CMAKE_CXX20_COMPILE_FEATURES	build/CMakeFiles/3.31.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX20_COMPILE_FEATURES "cxx_std_20")$/;"	v
CMAKE_CXX23_COMPILER_IMPORT_STD_NOT_FOUND_MESSAGE	build/CMakeFiles/3.31.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX23_COMPILER_IMPORT_STD_NOT_FOUND_MESSAGE "Unsupported generator: Unix Makefiles")$/;"	v
CMAKE_CXX23_COMPILE_FEATURES	build/CMakeFiles/3.31.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX23_COMPILE_FEATURES "cxx_std_23")$/;"	v
CMAKE_CXX26_COMPILE_FEATURES	build/CMakeFiles/3.31.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX26_COMPILE_FEATURES "")$/;"	v
CMAKE_CXX98_COMPILE_FEATURES	build/CMakeFiles/3.31.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX98_COMPILE_FEATURES "cxx_std_98;cxx_template_template_parameters")$/;"	v
CMAKE_CXX_ABI_COMPILED	build/CMakeFiles/3.31.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_ABI_COMPILED TRUE)$/;"	v
CMAKE_CXX_BYTE_ORDER	build/CMakeFiles/3.31.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_BYTE_ORDER "LITTLE_ENDIAN")$/;"	v
CMAKE_CXX_CL_SHOWINCLUDES_PREFIX	build/CMakeFiles/3.31.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_CL_SHOWINCLUDES_PREFIX "")$/;"	v
CMAKE_CXX_COMPILER	build/CMakeFiles/3.31.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER "\/Applications\/Xcode.app\/Contents\/Developer\/Toolchains\/XcodeDefault/;"	v
CMAKE_CXX_COMPILER_ABI	build/CMakeFiles/3.31.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_ABI "")$/;"	v
CMAKE_CXX_COMPILER_AR	build/CMakeFiles/3.31.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_AR "")$/;"	v
CMAKE_CXX_COMPILER_ARG1	build/CMakeFiles/3.31.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_ARG1 "")$/;"	v
CMAKE_CXX_COMPILER_CLANG_RESOURCE_DIR	build/CMakeFiles/3.31.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_CLANG_RESOURCE_DIR "")$/;"	v
CMAKE_CXX_COMPILER_ENV_VAR	build/CMakeFiles/3.31.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_ENV_VAR "CXX")$/;"	v
CMAKE_CXX_COMPILER_FRONTEND_VARIANT	build/CMakeFiles/3.31.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_FRONTEND_VARIANT "GNU")$/;"	v
CMAKE_CXX_COMPILER_ID	build/CMakeFiles/3.31.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_ID "AppleClang")$/;"	v
CMAKE_CXX_COMPILER_ID_RUN	build/CMakeFiles/3.31.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_ID_RUN 1)$/;"	v
CMAKE_CXX_COMPILER_IMPORT_STD	build/CMakeFiles/3.31.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_IMPORT_STD "")$/;"	v
CMAKE_CXX_COMPILER_LINKER	build/CMakeFiles/3.31.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_LINKER "\/Applications\/Xcode.app\/Contents\/Developer\/Toolchains\/Xcode/;"	v
CMAKE_CXX_COMPILER_LINKER_FRONTEND_VARIANT	build/CMakeFiles/3.31.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_LINKER_FRONTEND_VARIANT GNU)$/;"	v
CMAKE_CXX_COMPILER_LINKER_ID	build/CMakeFiles/3.31.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_LINKER_ID "AppleClang")$/;"	v
CMAKE_CXX_COMPILER_LINKER_VERSION	build/CMakeFiles/3.31.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_LINKER_VERSION 1115.7.3)$/;"	v
CMAKE_CXX_COMPILER_LOADED	build/CMakeFiles/3.31.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_LOADED 1)$/;"	v
CMAKE_CXX_COMPILER_RANLIB	build/CMakeFiles/3.31.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_RANLIB "")$/;"	v
CMAKE_CXX_COMPILER_VERSION	build/CMakeFiles/3.31.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_VERSION "16.0.0.16000026")$/;"	v
CMAKE_CXX_COMPILER_VERSION_INTERNAL	build/CMakeFiles/3.31.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_VERSION_INTERNAL "")$/;"	v
CMAKE_CXX_COMPILER_WORKS	build/CMakeFiles/3.31.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_WORKS TRUE)$/;"	v
CMAKE_CXX_COMPILER_WRAPPER	build/CMakeFiles/3.31.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_WRAPPER "")$/;"	v
CMAKE_CXX_COMPILE_FEATURES	build/CMakeFiles/3.31.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILE_FEATURES "cxx_std_98;cxx_template_template_parameters;cxx_std_11;cxx_alias/;"	v
CMAKE_CXX_EXTENSIONS	CMakeLists.txt	/^set(CMAKE_CXX_EXTENSIONS OFF)$/;"	v
CMAKE_CXX_EXTENSIONS_COMPUTED_DEFAULT	build/CMakeFiles/3.31.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_EXTENSIONS_COMPUTED_DEFAULT "ON")$/;"	v
CMAKE_CXX_FLAGS	CMakeLists.txt	/^set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fsanitize=address -fno-omit-frame-pointer")$/;"	v
CMAKE_CXX_IGNORE_EXTENSIONS	build/CMakeFiles/3.31.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_IGNORE_EXTENSIONS inl;h;hpp;HPP;H;o;O;obj;OBJ;def;DEF;rc;RC)$/;"	v
CMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES	build/CMakeFiles/3.31.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES "\/Applications\/Xcode.app\/Contents\/Developer\/Plat/;"	v
CMAKE_CXX_IMPLICIT_LINK_DIRECTORIES	build/CMakeFiles/3.31.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_IMPLICIT_LINK_DIRECTORIES "\/Applications\/Xcode.app\/Contents\/Developer\/Platfor/;"	v
CMAKE_CXX_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES	build/CMakeFiles/3.31.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES "\/Applications\/Xcode.app\/Contents\/Develope/;"	v
CMAKE_CXX_IMPLICIT_LINK_LIBRARIES	build/CMakeFiles/3.31.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_IMPLICIT_LINK_LIBRARIES "c++")$/;"	v
CMAKE_CXX_INCLUDE_REGEX_COMPLAIN	build/CMakeFiles/CMakeDirectoryInformation.cmake	/^set(CMAKE_CXX_INCLUDE_REGEX_COMPLAIN ${CMAKE_C_INCLUDE_REGEX_COMPLAIN})$/;"	v
CMAKE_CXX_INCLUDE_REGEX_SCAN	build/CMakeFiles/CMakeDirectoryInformation.cmake	/^set(CMAKE_CXX_INCLUDE_REGEX_SCAN ${CMAKE_C_INCLUDE_REGEX_SCAN})$/;"	v
CMAKE_CXX_LIBRARY_ARCHITECTURE	build/CMakeFiles/3.31.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_LIBRARY_ARCHITECTURE "")$/;"	v
CMAKE_CXX_LINKER_DEPFILE_SUPPORTED	build/CMakeFiles/3.31.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_LINKER_DEPFILE_SUPPORTED )$/;"	v
CMAKE_CXX_LINKER_PREFERENCE	build/CMakeFiles/3.31.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_LINKER_PREFERENCE 30)$/;"	v
CMAKE_CXX_LINKER_PREFERENCE_PROPAGATES	build/CMakeFiles/3.31.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_LINKER_PREFERENCE_PROPAGATES 1)$/;"	v
CMAKE_CXX_PLATFORM_ID	build/CMakeFiles/3.31.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_PLATFORM_ID "Darwin")$/;"	v
CMAKE_CXX_SIMULATE_ID	build/CMakeFiles/3.31.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_SIMULATE_ID "")$/;"	v
CMAKE_CXX_SIMULATE_VERSION	build/CMakeFiles/3.31.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_SIMULATE_VERSION "")$/;"	v
CMAKE_CXX_SIZEOF_DATA_PTR	build/CMakeFiles/3.31.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_SIZEOF_DATA_PTR "8")$/;"	v
CMAKE_CXX_SOURCE_FILE_EXTENSIONS	build/CMakeFiles/3.31.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_SOURCE_FILE_EXTENSIONS C;M;c++;cc;cpp;cxx;m;mm;mpp;CPP;ixx;cppm;ccm;cxxm;c++m)$/;"	v
CMAKE_CXX_STANDARD	CMakeLists.txt	/^set(CMAKE_CXX_STANDARD 23)$/;"	v
CMAKE_CXX_STANDARD_COMPUTED_DEFAULT	build/CMakeFiles/3.31.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_STANDARD_COMPUTED_DEFAULT "98")$/;"	v
CMAKE_CXX_STANDARD_LATEST	build/CMakeFiles/3.31.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_STANDARD_LATEST "23")$/;"	v
CMAKE_CXX_STANDARD_REQUIRED	CMakeLists.txt	/^set(CMAKE_CXX_STANDARD_REQUIRED ON)$/;"	v
CMAKE_C_INCLUDE_REGEX_COMPLAIN	build/CMakeFiles/CMakeDirectoryInformation.cmake	/^set(CMAKE_C_INCLUDE_REGEX_COMPLAIN "^$")$/;"	v
CMAKE_C_INCLUDE_REGEX_SCAN	build/CMakeFiles/CMakeDirectoryInformation.cmake	/^set(CMAKE_C_INCLUDE_REGEX_SCAN "^.*$")$/;"	v
CMAKE_DEPENDS_DEPENDENCY_FILES	build/CMakeFiles/jerry.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_DEPENDENCY_FILES$/;"	v
CMAKE_DEPENDS_DEPENDENCY_FILES	build/CMakeFiles/tokenizer_tests.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_DEPENDENCY_FILES$/;"	v
CMAKE_DEPENDS_GENERATOR	build/CMakeFiles/Makefile.cmake	/^set(CMAKE_DEPENDS_GENERATOR "Unix Makefiles")$/;"	v
CMAKE_DEPENDS_IN_PROJECT_ONLY	build/CMakeFiles/jerry.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_IN_PROJECT_ONLY OFF)$/;"	v
CMAKE_DEPENDS_IN_PROJECT_ONLY	build/CMakeFiles/tokenizer_tests.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_IN_PROJECT_ONLY OFF)$/;"	v
CMAKE_DEPENDS_LANGUAGES	build/CMakeFiles/jerry.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_LANGUAGES$/;"	v
CMAKE_DEPENDS_LANGUAGES	build/CMakeFiles/tokenizer_tests.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_LANGUAGES$/;"	v
CMAKE_DEPEND_INFO_FILES	build/CMakeFiles/Makefile.cmake	/^set(CMAKE_DEPEND_INFO_FILES$/;"	v
CMAKE_FORCE_UNIX_PATHS	build/CMakeFiles/CMakeDirectoryInformation.cmake	/^set(CMAKE_FORCE_UNIX_PATHS 1)$/;"	v
CMAKE_Fortran_TARGET_FORWARD_LINKED_INFO_FILES	build/CMakeFiles/jerry.dir/DependInfo.cmake	/^set(CMAKE_Fortran_TARGET_FORWARD_LINKED_INFO_FILES$/;"	v
CMAKE_Fortran_TARGET_FORWARD_LINKED_INFO_FILES	build/CMakeFiles/tokenizer_tests.dir/DependInfo.cmake	/^set(CMAKE_Fortran_TARGET_FORWARD_LINKED_INFO_FILES$/;"	v
CMAKE_Fortran_TARGET_LINKED_INFO_FILES	build/CMakeFiles/jerry.dir/DependInfo.cmake	/^set(CMAKE_Fortran_TARGET_LINKED_INFO_FILES$/;"	v
CMAKE_Fortran_TARGET_LINKED_INFO_FILES	build/CMakeFiles/tokenizer_tests.dir/DependInfo.cmake	/^set(CMAKE_Fortran_TARGET_LINKED_INFO_FILES$/;"	v
CMAKE_Fortran_TARGET_MODULE_DIR	build/CMakeFiles/jerry.dir/DependInfo.cmake	/^set(CMAKE_Fortran_TARGET_MODULE_DIR "")$/;"	v
CMAKE_Fortran_TARGET_MODULE_DIR	build/CMakeFiles/tokenizer_tests.dir/DependInfo.cmake	/^set(CMAKE_Fortran_TARGET_MODULE_DIR "")$/;"	v
CMAKE_HOST_SYSTEM	build/CMakeFiles/3.31.3/CMakeSystem.cmake	/^set(CMAKE_HOST_SYSTEM "Darwin-24.3.0")$/;"	v
CMAKE_HOST_SYSTEM_NAME	build/CMakeFiles/3.31.3/CMakeSystem.cmake	/^set(CMAKE_HOST_SYSTEM_NAME "Darwin")$/;"	v
CMAKE_HOST_SYSTEM_PROCESSOR	build/CMakeFiles/3.31.3/CMakeSystem.cmake	/^set(CMAKE_HOST_SYSTEM_PROCESSOR "arm64")$/;"	v
CMAKE_HOST_SYSTEM_VERSION	build/CMakeFiles/3.31.3/CMakeSystem.cmake	/^set(CMAKE_HOST_SYSTEM_VERSION "24.3.0")$/;"	v
CMAKE_INSTALL_COMPONENT	build/cmake_install.cmake	/^    set(CMAKE_INSTALL_COMPONENT "${COMPONENT}")$/;"	v
CMAKE_INSTALL_COMPONENT	build/cmake_install.cmake	/^    set(CMAKE_INSTALL_COMPONENT)$/;"	v
CMAKE_INSTALL_CONFIG_NAME	build/cmake_install.cmake	/^    set(CMAKE_INSTALL_CONFIG_NAME "Debug")$/;"	v
CMAKE_INSTALL_MANIFEST	build/cmake_install.cmake	/^    set(CMAKE_INSTALL_MANIFEST "install_manifest_${CMAKE_INSTALL_COMPONENT}.txt")$/;"	v
CMAKE_INSTALL_MANIFEST	build/cmake_install.cmake	/^    set(CMAKE_INSTALL_MANIFEST "install_manifest_${CMAKE_INST_COMP_HASH}.txt")$/;"	v
CMAKE_INSTALL_MANIFEST	build/cmake_install.cmake	/^  set(CMAKE_INSTALL_MANIFEST "install_manifest.txt")$/;"	v
CMAKE_INSTALL_PREFIX	build/cmake_install.cmake	/^  set(CMAKE_INSTALL_PREFIX "\/usr\/local")$/;"	v
CMAKE_INTERNAL_PLATFORM_ABI	build/CMakeFiles/3.31.3/CMakeCXXCompiler.cmake	/^  set(CMAKE_INTERNAL_PLATFORM_ABI "${CMAKE_CXX_COMPILER_ABI}")$/;"	v
CMAKE_LIBRARY_ARCHITECTURE	build/CMakeFiles/3.31.3/CMakeCXXCompiler.cmake	/^  set(CMAKE_LIBRARY_ARCHITECTURE "")$/;"	v
CMAKE_LINKER	build/CMakeFiles/3.31.3/CMakeCXXCompiler.cmake	/^set(CMAKE_LINKER "\/Applications\/Xcode.app\/Contents\/Developer\/Toolchains\/XcodeDefault.xctoo/;"	v
CMAKE_LINKER_FLAGS	CMakeLists.txt	/^set(CMAKE_LINKER_FLAGS "${CMAKE_LINKER_FLAGS} -fsanitize=address")$/;"	v
CMAKE_LINKER_LINK	build/CMakeFiles/3.31.3/CMakeCXXCompiler.cmake	/^set(CMAKE_LINKER_LINK "")$/;"	v
CMAKE_LINKER_LLD	build/CMakeFiles/3.31.3/CMakeCXXCompiler.cmake	/^set(CMAKE_LINKER_LLD "")$/;"	v
CMAKE_MAKEFILE_DEPENDS	build/CMakeFiles/Makefile.cmake	/^set(CMAKE_MAKEFILE_DEPENDS$/;"	v
CMAKE_MAKEFILE_OUTPUTS	build/CMakeFiles/Makefile.cmake	/^set(CMAKE_MAKEFILE_OUTPUTS$/;"	v
CMAKE_MAKEFILE_PRODUCTS	build/CMakeFiles/Makefile.cmake	/^set(CMAKE_MAKEFILE_PRODUCTS$/;"	v
CMAKE_MT	build/CMakeFiles/3.31.3/CMakeCXXCompiler.cmake	/^set(CMAKE_MT "")$/;"	v
CMAKE_OBJDUMP	build/cmake_install.cmake	/^  set(CMAKE_OBJDUMP "\/Applications\/Xcode.app\/Contents\/Developer\/Toolchains\/XcodeDefault.xc/;"	v
CMAKE_RANLIB	build/CMakeFiles/3.31.3/CMakeCXXCompiler.cmake	/^set(CMAKE_RANLIB "\/Applications\/Xcode.app\/Contents\/Developer\/Toolchains\/XcodeDefault.xctoo/;"	v
CMAKE_RELATIVE_PATH_TOP_BINARY	build/CMakeFiles/CMakeDirectoryInformation.cmake	/^set(CMAKE_RELATIVE_PATH_TOP_BINARY "\/Users\/nr\/projects\/jerry\/build")$/;"	v
CMAKE_RELATIVE_PATH_TOP_SOURCE	build/CMakeFiles/CMakeDirectoryInformation.cmake	/^set(CMAKE_RELATIVE_PATH_TOP_SOURCE "\/Users\/nr\/projects\/jerry")$/;"	v
CMAKE_RUNTIME_OUTPUT_DIRECTORY	CMakeLists.txt	/^set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}\/bin)$/;"	v
CMAKE_SIZEOF_VOID_P	build/CMakeFiles/3.31.3/CMakeCXXCompiler.cmake	/^  set(CMAKE_SIZEOF_VOID_P "${CMAKE_CXX_SIZEOF_DATA_PTR}")$/;"	v
CMAKE_SOURCE_DIR	build/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/nr\/projects\/jerry$/;"	m
CMAKE_SYSTEM	build/CMakeFiles/3.31.3/CMakeSystem.cmake	/^set(CMAKE_SYSTEM "Darwin-24.3.0")$/;"	v
CMAKE_SYSTEM_LOADED	build/CMakeFiles/3.31.3/CMakeSystem.cmake	/^set(CMAKE_SYSTEM_LOADED 1)$/;"	v
CMAKE_SYSTEM_NAME	build/CMakeFiles/3.31.3/CMakeSystem.cmake	/^set(CMAKE_SYSTEM_NAME "Darwin")$/;"	v
CMAKE_SYSTEM_PROCESSOR	build/CMakeFiles/3.31.3/CMakeSystem.cmake	/^set(CMAKE_SYSTEM_PROCESSOR "arm64")$/;"	v
CMAKE_SYSTEM_VERSION	build/CMakeFiles/3.31.3/CMakeSystem.cmake	/^set(CMAKE_SYSTEM_VERSION "24.3.0")$/;"	v
CMAKE_TAPI	build/CMakeFiles/3.31.3/CMakeCXXCompiler.cmake	/^set(CMAKE_TAPI "\/Applications\/Xcode.app\/Contents\/Developer\/Toolchains\/XcodeDefault.xctoolc/;"	v
COMPILER_ID	build/CMakeFiles/3.31.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_ID /;"	d	file:
COMPILER_VERSION	build/CMakeFiles/3.31.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define COMPILER_VERSION /;"	d	file:
COMPILER_VERSION_INTERNAL	build/CMakeFiles/3.31.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define COMPILER_VERSION_INTERNAL /;"	d	file:
COMPILER_VERSION_INTERNAL	build/CMakeFiles/3.31.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_INTERNAL /;"	d	file:
COMPILER_VERSION_INTERNAL	build/CMakeFiles/3.31.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_INTERNAL /;"	d	file:
COMPILER_VERSION_INTERNAL_STR	build/CMakeFiles/3.31.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_INTERNAL_STR /;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.31.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^  # define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.31.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.31.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.31.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.31.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^  # define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.31.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.31.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.31.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.31.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^  # define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.31.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.31.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.31.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.31.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_TWEAK /;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.31.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_TWEAK /;"	d	file:
CXX_STD	build/CMakeFiles/3.31.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#    define CXX_STD /;"	d	file:
CXX_STD	build/CMakeFiles/3.31.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#    define CXX_STD CXX_STD_/;"	d	file:
CXX_STD	build/CMakeFiles/3.31.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define CXX_STD /;"	d	file:
CXX_STD	build/CMakeFiles/3.31.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define CXX_STD CXX_STD_/;"	d	file:
CXX_STD_11	build/CMakeFiles/3.31.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define CXX_STD_11 /;"	d	file:
CXX_STD_14	build/CMakeFiles/3.31.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define CXX_STD_14 /;"	d	file:
CXX_STD_17	build/CMakeFiles/3.31.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define CXX_STD_17 /;"	d	file:
CXX_STD_20	build/CMakeFiles/3.31.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define CXX_STD_20 /;"	d	file:
CXX_STD_23	build/CMakeFiles/3.31.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define CXX_STD_23 /;"	d	file:
CXX_STD_98	build/CMakeFiles/3.31.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define CXX_STD_98 /;"	d	file:
C_Cpp.default.configurationProvider	.vscode/settings.json	/^    "C_Cpp.default.configurationProvider": "ms-vscode.cmake-tools",$/;"	s
Colon	src/JsonToken.h	/^        Colon,$/;"	e	enum:jerry::JsonTokenType	access:public
Comma	src/JsonToken.h	/^        Comma$/;"	e	enum:jerry::JsonTokenType	access:public
DEC	build/CMakeFiles/3.31.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define DEC(/;"	d	file:	signature:(n)
EQUALS	build/Makefile	/^EQUALS = =$/;"	m
HEX	build/CMakeFiles/3.31.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define HEX(/;"	d	file:	signature:(n)
JsonToken	src/JsonToken.h	/^    struct JsonToken {$/;"	s	namespace:jerry
JsonTokenType	src/JsonToken.h	/^    enum class JsonTokenType {$/;"	g	namespace:jerry
MIMode	.vscode/launch.json	/^            "MIMode": "lldb",$/;"	s	object:configurations.0
MIMode	.vscode/launch.json	/^            "MIMode": "lldb",$/;"	s	object:configurations.1
MIMode	.vscode/launch.json	/^            "MIMode": "lldb",$/;"	s	object:configurations.2
Null	src/JsonToken.h	/^        Null,$/;"	e	enum:jerry::JsonTokenType	access:public
Number	src/JsonToken.h	/^        Number,$/;"	e	enum:jerry::JsonTokenType	access:public
ObjectEnd	src/JsonToken.h	/^        ObjectEnd,$/;"	e	enum:jerry::JsonTokenType	access:public
ObjectStart	src/JsonToken.h	/^        ObjectStart,  $/;"	e	enum:jerry::JsonTokenType	access:public
PLATFORM_ID	build/CMakeFiles/3.31.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define PLATFORM_ID /;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.31.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define PLATFORM_ID$/;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.31.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define PLATFORM_ID /;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.31.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define PLATFORM_ID$/;"	d	file:
RM	build/Makefile	/^RM = \/opt\/homebrew\/bin\/cmake -E rm -f$/;"	m
SHELL	build/Makefile	/^SHELL = \/bin\/sh$/;"	m
SIMULATE_ID	build/CMakeFiles/3.31.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_ID /;"	d	file:
SIMULATE_ID	build/CMakeFiles/3.31.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define SIMULATE_ID /;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.31.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_VERSION_MAJOR /;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.31.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define SIMULATE_VERSION_MAJOR /;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.31.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_VERSION_MINOR /;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.31.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define SIMULATE_VERSION_MINOR /;"	d	file:
SIMULATE_VERSION_PATCH	build/CMakeFiles/3.31.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define SIMULATE_VERSION_PATCH /;"	d	file:
SIMULATE_VERSION_PATCH	build/CMakeFiles/3.31.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_VERSION_PATCH /;"	d	file:
SIMULATE_VERSION_PATCH	build/CMakeFiles/3.31.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define SIMULATE_VERSION_PATCH /;"	d	file:
STRINGIFY	build/CMakeFiles/3.31.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define STRINGIFY(X) STRINGIFY_/;"	d	file:	signature:(X)
STRINGIFY_HELPER	build/CMakeFiles/3.31.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define STRINGIFY_HELPER(/;"	d	file:	signature:(X)
String	src/JsonToken.h	/^        String,$/;"	e	enum:jerry::JsonTokenType	access:public
TEST	test/TokenizerTest.cpp	/^TEST(TokenizerTest, BraceOpenTest) { $/;"	f	signature:(TokenizerTest,BraceOpenTest)
TEST	test/TokenizerTest.cpp	/^TEST(TokenizerTest, DigitTest) {$/;"	f	signature:(TokenizerTest,DigitTest)
TEST	test/TokenizerTest.cpp	/^TEST(TokenizerTest, ManyOfTest) {$/;"	f	signature:(TokenizerTest,ManyOfTest)
TEST	test/TokenizerTest.cpp	/^TEST(TokenizerTest, MapCharTest) { $/;"	f	signature:(TokenizerTest,MapCharTest)
TEST	test/TokenizerTest.cpp	/^TEST(TokenizerTest, OrElseTest) { $/;"	f	signature:(TokenizerTest,OrElseTest)
TEST	test/TokenizerTest.cpp	/^TEST(TokenizerTest, ParseJsonStringTest) {$/;"	f	signature:(TokenizerTest,ParseJsonStringTest)
TEST	test/TokenizerTest.cpp	/^TEST(TokenizerTest, ParseSentenceBindTest) { $/;"	f	signature:(TokenizerTest,ParseSentenceBindTest)
TEST	test/TokenizerTest.cpp	/^TEST(TokenizerTest, ParseWordTest) {$/;"	f	signature:(TokenizerTest,ParseWordTest)
TEST	test/TokenizerTest.cpp	/^TEST(TokenizerTest, PureTest) {$/;"	f	signature:(TokenizerTest,PureTest)
TEST	test/TokenizerTest.cpp	/^TEST(TokenizerTest, StructuralTokenTest) {$/;"	f	signature:(TokenizerTest,StructuralTokenTest)
TEST	test/TokenizerTest.cpp	/^TEST(TokenizerTest, TokenizerExampleTest) {$/;"	f	signature:(TokenizerTest,TokenizerExampleTest)
TEST_P	test/TokenizerStateTest.cpp	/^TEST_P(TokenizerStateTest, TokenizerStateAdvanceTest) {$/;"	f	signature:(TokenizerStateTest,TokenizerStateAdvanceTest)
TEST_P	test/TokenizerStateTest.cpp	/^TEST_P(TokenizerStateTest, TokenizerStateInit) {$/;"	f	signature:(TokenizerStateTest,TokenizerStateInit)
Tokenizer	src/Tokenizer.h	/^    explicit Tokenizer(TokenizerFunc f): func(f) {};$/;"	f	class:jerry::Tokenizer	access:public	signature:(TokenizerFunc f)
Tokenizer	src/Tokenizer.h	/^  class Tokenizer {$/;"	c	namespace:jerry
TokenizerFunc	src/Tokenizer.h	/^    using TokenizerFunc = std::function<std::optional<std::pair<T, TokenizerState>>(TokenizerSta/;"	t	class:jerry::Tokenizer	access:private
TokenizerState	src/Tokenizer.cpp	/^  TokenizerState::TokenizerState(std::string s, size_t pos) : input(s), position(pos){};$/;"	f	class:jerry::TokenizerState	signature:(std::string s,size_t pos)
TokenizerState	src/Tokenizer.h	/^    explicit TokenizerState(std::string s, size_t pos);$/;"	p	class:jerry::TokenizerState	access:public	signature:(std::string s,size_t pos)
TokenizerState	src/Tokenizer.h	/^  class TokenizerState {$/;"	c	namespace:jerry
TokenizerStateTest	test/TokenizerStateTest.cpp	/^class TokenizerStateTest :public ::testing::TestWithParam<std::tuple<std::string, int, char>> {}/;"	c	file:	inherits:::testing::TestWithParam<std::tuple<std::string,int,char>>
__anon14eca6a00102	test/TokenizerTest.cpp	/^  auto toUpper = character().map<char>([](char c) {$/;"	f	function:TEST	file:	signature:(char c) 
__anon14eca6a00202	test/TokenizerTest.cpp	/^  auto toke = manyOf(whitespace()).bind<JsonToken>([](std::vector<char>){$/;"	f	function:TEST	file:	signature:(std::vector<char>)
__anon7d8d5a4d0102	src/Tokenizer.h	/^                          transform = std::move(transform)](TokenizerState state) -> std::option/;"	f	function:jerry::Tokenizer::bind	typeref:typename:std::optional<std::pair<U,TokenizerState>>	file:	signature:(TokenizerState state) 
__anon7d8d5a4d0202	src/Tokenizer.h	/^        transform = std::move(f), this](TokenizerState state) -> std::optional<std::pair<U, Toke/;"	f	function:jerry::Tokenizer::map	typeref:typename:std::optional<std::pair<U,TokenizerState>>	file:	signature:(TokenizerState state) 
__anon7d8d5a4d0302	src/Tokenizer.h	/^    return Tokenizer<T>([=](TokenizerState state) -> std::optional<std::pair<T, TokenizerState>>/;"	f	function:jerry::orElse	typeref:typename:std::optional<std::pair<T,TokenizerState>>	file:	signature:(TokenizerState state) 
__anon7d8d5a4d0402	src/Tokenizer.h	/^    return Tokenizer<std::vector<T>>([x](TokenizerState state) -> std::optional<std::pair<std::v/;"	f	function:jerry::manyOf	typeref:typename:std::optional<std::pair<std::vector<T>,TokenizerState>>	file:	signature:(TokenizerState state) 
__anon7d8d5a4d0502	src/Tokenizer.h	/^    return Tokenizer<T>([=](TokenizerState state) -> std::optional<std::pair<T, TokenizerState>>/;"	f	function:jerry::pure	typeref:typename:std::optional<std::pair<T,TokenizerState>>	file:	signature:(TokenizerState state) 
__anon7d8d5a4d0602	src/Tokenizer.h	/^    return Tokenizer<T>([matcher = std::move(matcher), value](TokenizerState state) -> std::opti/;"	f	function:jerry::match	typeref:typename:std::optional<std::pair<T,TokenizerState>>	file:	signature:(TokenizerState state) 
__anon7d8d5a4d0702	src/Tokenizer.h	/^    auto equalityChecker = [other](T val) {$/;"	f	function:jerry::isEqual	file:	signature:(T val) 
__anon7d8d5a4d0802	src/Tokenizer.h	/^    auto equalityChecker = [other](T val) {$/;"	f	function:jerry::isNotEqual	file:	signature:(T val) 
__anon7d8d5a4d0902	src/Tokenizer.h	/^    auto digitChecker = [](char c) {$/;"	f	function:jerry::isDigit	file:	signature:(char c) 
__anon7d8d5a4d0a02	src/Tokenizer.h	/^    return Tokenizer<T>([=](TokenizerState) -> std::optional<std::pair<T, TokenizerState>> {$/;"	f	function:jerry::fail	typeref:typename:std::optional<std::pair<T,TokenizerState>>	file:	signature:(TokenizerState) 
__anon7d8d5a4d0b02	src/Tokenizer.h	/^    return Tokenizer<char>([](TokenizerState state) -> std::optional<std::pair<char, TokenizerSt/;"	f	function:jerry::character	typeref:typename:std::optional<std::pair<char,TokenizerState>>	file:	signature:(TokenizerState state) 
__anon7d8d5a4d0c02	src/Tokenizer.h	/^    auto asDigit = [](char c) {$/;"	f	function:jerry::digit	file:	signature:(char c) 
__anon7d8d5a4d0d02	src/Tokenizer.h	/^    return character().bind<uint>([asDigit](char c) {$/;"	f	function:jerry::digit	file:	signature:(char c) 
__anon7d8d5a4d0e02	src/Tokenizer.h	/^    return character().bind<char>([](char c) {$/;"	f	function:jerry::whitespace	file:	signature:(char c) 
__anon7d8d5a4d0f02	src/Tokenizer.h	/^    return character().bind<char>([](char c) {$/;"	f	function:jerry::braceOpen	file:	signature:(char c) 
__anon7d8d5a4d1002	src/Tokenizer.h	/^    return character().bind<char>([](char c) {$/;"	f	function:jerry::braceClose	file:	signature:(char c) 
__anon7d8d5a4d1102	src/Tokenizer.h	/^    return character().bind<char>([](char c) {$/;"	f	function:jerry::bracketOpen	file:	signature:(char c) 
__anon7d8d5a4d1202	src/Tokenizer.h	/^    return character().bind<char>([](char c) {$/;"	f	function:jerry::bracketClose	file:	signature:(char c) 
__anon7d8d5a4d1302	src/Tokenizer.h	/^    return character().bind<char>([](char c) {$/;"	f	function:jerry::colon	file:	signature:(char c) 
__anon7d8d5a4d1402	src/Tokenizer.h	/^    return character().bind<char>([](char c) {$/;"	f	function:jerry::comma	file:	signature:(char c) 
__anon7d8d5a4d1502	src/Tokenizer.h	/^    return character().bind<char>([](char c) {$/;"	f	function:jerry::doubleQuote	file:	signature:(char c) 
__anon7d8d5a4d1602	src/Tokenizer.h	/^    return manyOf<char>(character().bind<char>([](char c){$/;"	f	function:jerry::word	file:	signature:(char c)
__anon7d8d5a4d1702	src/Tokenizer.h	/^    })).bind<std::string>([](std::vector<char> chars){$/;"	f	function:jerry::word	file:	signature:(std::vector<char> chars)
__anon7d8d5a4d1802	src/Tokenizer.h	/^    auto wordFollowedBySpace = word().bind<std::string>([](std::string w) {$/;"	f	function:jerry::sentence	file:	signature:(std::string w) 
__anon7d8d5a4d1902	src/Tokenizer.h	/^      return manyOf<char>(whitespace()).map<std::string>([w](std::vector<char>) {$/;"	f	function:jerry::sentence::__anon7d8d5a4d1802	file:	signature:(std::vector<char>) 
__anon7d8d5a4d1a02	src/Tokenizer.h	/^    return character().bind<JsonToken>([](char c) {$/;"	f	function:jerry::objectStart	file:	signature:(char c) 
__anon7d8d5a4d1b02	src/Tokenizer.h	/^      return isEqual(c, '{').bind<JsonToken>([](char c){$/;"	f	function:jerry::objectStart::__anon7d8d5a4d1a02	file:	signature:(char c)
__anon7d8d5a4d1c02	src/Tokenizer.h	/^    return character().bind<JsonToken>([](char c) {$/;"	f	function:jerry::objectEnd	file:	signature:(char c) 
__anon7d8d5a4d1d02	src/Tokenizer.h	/^      return isEqual(c, '}').bind<JsonToken>([](char c){$/;"	f	function:jerry::objectEnd::__anon7d8d5a4d1c02	file:	signature:(char c)
__anon7d8d5a4d1e02	src/Tokenizer.h	/^    return character().bind<JsonToken>([](char c) {$/;"	f	function:jerry::arrayStart	file:	signature:(char c) 
__anon7d8d5a4d1f02	src/Tokenizer.h	/^      return isEqual(c, '[').bind<JsonToken>([](char c){$/;"	f	function:jerry::arrayStart::__anon7d8d5a4d1e02	file:	signature:(char c)
__anon7d8d5a4d2002	src/Tokenizer.h	/^    return character().bind<JsonToken>([](char c) {$/;"	f	function:jerry::arrayEnd	file:	signature:(char c) 
__anon7d8d5a4d2102	src/Tokenizer.h	/^      return isEqual(c, ']').bind<JsonToken>([](char c){$/;"	f	function:jerry::arrayEnd::__anon7d8d5a4d2002	file:	signature:(char c)
__anon7d8d5a4d2202	src/Tokenizer.h	/^    return doubleQuote().bind<std::string>([](char) {$/;"	f	function:jerry::jsonString	file:	signature:(char) 
__anon7d8d5a4d2302	src/Tokenizer.h	/^      return manyOf<char>(character().bind<char>([](char c){$/;"	f	function:jerry::jsonString::__anon7d8d5a4d2202	file:	signature:(char c)
__anon7d8d5a4d2402	src/Tokenizer.h	/^      })).bind<std::string>([](std::vector<char> chars){$/;"	f	function:jerry::jsonString::__anon7d8d5a4d2202	file:	signature:(std::vector<char> chars)
__anon7d8d5a4d2502	src/Tokenizer.h	/^        return doubleQuote().map<std::string>([s](char) {$/;"	f	function:jerry::jsonString::__anon7d8d5a4d2202::__anon7d8d5a4d2402	file:	signature:(char) 
__anon7d8d5a4d2602	src/Tokenizer.h	/^    }).map<JsonToken>([](std::string s) {$/;"	f	function:jerry::jsonString	file:	signature:(std::string s) 
__bit_reference	.vscode/settings.json	/^        "__bit_reference": "cpp",$/;"	s	object:files.associations
__has_include	build/CMakeFiles/3.31.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define __has_include(/;"	d	file:	signature:(x)
__hash_table	.vscode/settings.json	/^        "__hash_table": "cpp",$/;"	s	object:files.associations
__locale	.vscode/settings.json	/^        "__locale": "cpp",$/;"	s	object:files.associations
__node_handle	.vscode/settings.json	/^        "__node_handle": "cpp",$/;"	s	object:files.associations
__split_buffer	.vscode/settings.json	/^        "__split_buffer": "cpp",$/;"	s	object:files.associations
__threading_support	.vscode/settings.json	/^        "__threading_support": "cpp",$/;"	s	object:files.associations
__tree	.vscode/settings.json	/^        "__tree": "cpp",$/;"	s	object:files.associations
__verbose_abort	.vscode/settings.json	/^        "__verbose_abort": "cpp",$/;"	s	object:files.associations
advance	src/Tokenizer.cpp	/^  TokenizerState TokenizerState::advance() const {$/;"	f	class:jerry::TokenizerState	typeref:typename:TokenizerState	signature:() const
advance	src/Tokenizer.h	/^    TokenizerState advance() const;$/;"	p	class:jerry::TokenizerState	typeref:typename:TokenizerState	access:public	signature:() const
algorithm	.vscode/settings.json	/^        "algorithm": "cpp"$/;"	s	object:files.associations
all	build/Makefile	/^all: cmake_check_build_system$/;"	t
any	.vscode/settings.json	/^        "any": "cpp",$/;"	s	object:files.associations
args	.vscode/launch.json	/^            "args": [],$/;"	a	object:configurations.0
args	.vscode/launch.json	/^            "args": [],$/;"	a	object:configurations.1
args	.vscode/launch.json	/^            "args": [],$/;"	a	object:configurations.2
args	.vscode/tasks.json	/^            "args": [$/;"	a	object:tasks.0
args	.vscode/tasks.json	/^            "args": [$/;"	a	object:tasks.1
args	.vscode/tasks.json	/^            "args": [$/;"	a	object:tasks.2
array	.vscode/settings.json	/^        "array": "cpp",$/;"	s	object:files.associations
arrayEnd	src/Tokenizer.h	/^  static Tokenizer<JsonToken> arrayEnd() {$/;"	f	namespace:jerry	typeref:typename:Tokenizer<JsonToken>	signature:()
arrayStart	src/Tokenizer.h	/^  static Tokenizer<JsonToken> arrayStart() {$/;"	f	namespace:jerry	typeref:typename:Tokenizer<JsonToken>	signature:()
bind	src/Tokenizer.h	/^    Tokenizer<U> bind(std::function<Tokenizer<U>(T)> f) const {$/;"	f	class:jerry::Tokenizer	typeref:typename:Tokenizer<U>	access:public	signature:(std::function<Tokenizer<U> (T)> f) const
bitset	.vscode/settings.json	/^        "bitset": "cpp",$/;"	s	object:files.associations
braceClose	src/Tokenizer.h	/^  static Tokenizer<char> braceClose() {$/;"	f	namespace:jerry	typeref:typename:Tokenizer<char>	signature:()
braceOpen	src/Tokenizer.h	/^  static Tokenizer<char> braceOpen() {$/;"	f	namespace:jerry	typeref:typename:Tokenizer<char>	signature:()
bracketClose	src/Tokenizer.h	/^  static Tokenizer<char> bracketClose() {$/;"	f	namespace:jerry	typeref:typename:Tokenizer<char>	signature:()
bracketOpen	src/Tokenizer.h	/^  static Tokenizer<char> bracketOpen() {$/;"	f	namespace:jerry	typeref:typename:Tokenizer<char>	signature:()
cctype	.vscode/settings.json	/^        "cctype": "cpp",$/;"	s	object:files.associations
character	src/Tokenizer.h	/^  static Tokenizer<char> character() {$/;"	f	namespace:jerry	typeref:typename:Tokenizer<char>	signature:()
charconv	.vscode/settings.json	/^        "charconv": "cpp",$/;"	s	object:files.associations
clean	build/Makefile	/^clean:$/;"	t
clean/fast	build/Makefile	/^clean\/fast: clean$/;"	t
clocale	.vscode/settings.json	/^        "clocale": "cpp",$/;"	s	object:files.associations
cmake.buildDirectory	.vscode/settings.json	/^    "cmake.buildDirectory": "${workspaceFolder}\/build",$/;"	s
cmake.configureOnOpen	.vscode/settings.json	/^    "cmake.configureOnOpen": true,$/;"	b
cmake.installPrefix	.vscode/settings.json	/^    "cmake.installPrefix": "${workspaceFolder}\/install",$/;"	s
cmake_check_build_system	build/Makefile	/^cmake_check_build_system:$/;"	t
cmake_force	build/Makefile	/^cmake_force:$/;"	t
cmath	.vscode/settings.json	/^        "cmath": "cpp",$/;"	s	object:files.associations
colon	src/Tokenizer.h	/^  static Tokenizer<char> colon() {$/;"	f	namespace:jerry	typeref:typename:Tokenizer<char>	signature:()
comma	src/Tokenizer.h	/^  static Tokenizer<char> comma() {$/;"	f	namespace:jerry	typeref:typename:Tokenizer<char>	signature:()
command	.vscode/tasks.json	/^            "command": "cmake",$/;"	s	object:tasks.0
command	.vscode/tasks.json	/^            "command": "cmake",$/;"	s	object:tasks.1
command	.vscode/tasks.json	/^            "command": "ctest",$/;"	s	object:tasks.2
complex	.vscode/settings.json	/^        "complex": "cpp",$/;"	s	object:files.associations
condition_variable	.vscode/settings.json	/^        "condition_variable": "cpp",$/;"	s	object:files.associations
configurations	.vscode/launch.json	/^    "configurations": [$/;"	a
configurations.0	.vscode/launch.json	/^        {$/;"	o	array:configurations
configurations.0.MIMode	.vscode/launch.json	/^            "MIMode": "lldb",$/;"	s	object:configurations.0
configurations.0.args	.vscode/launch.json	/^            "args": [],$/;"	a	object:configurations.0
configurations.0.cwd	.vscode/launch.json	/^            "cwd": "${workspaceFolder}",$/;"	s	object:configurations.0
configurations.0.environment	.vscode/launch.json	/^            "environment": [],$/;"	a	object:configurations.0
configurations.0.externalConsole	.vscode/launch.json	/^            "externalConsole": false,$/;"	b	object:configurations.0
configurations.0.name	.vscode/launch.json	/^            "name": "Debug jerry",$/;"	s	object:configurations.0
configurations.0.preLaunchTask	.vscode/launch.json	/^            "preLaunchTask": "CMake: build"$/;"	s	object:configurations.0
configurations.0.program	.vscode/launch.json	/^            "program": "${workspaceFolder}\/build\/jerry",$/;"	s	object:configurations.0
configurations.0.request	.vscode/launch.json	/^            "request": "launch",$/;"	s	object:configurations.0
configurations.0.stopAtEntry	.vscode/launch.json	/^            "stopAtEntry": false,$/;"	b	object:configurations.0
configurations.0.type	.vscode/launch.json	/^            "type": "cppdbg",$/;"	s	object:configurations.0
configurations.1	.vscode/launch.json	/^        {$/;"	o	array:configurations
configurations.1.MIMode	.vscode/launch.json	/^            "MIMode": "lldb",$/;"	s	object:configurations.1
configurations.1.args	.vscode/launch.json	/^            "args": [],$/;"	a	object:configurations.1
configurations.1.cwd	.vscode/launch.json	/^            "cwd": "${workspaceFolder}",$/;"	s	object:configurations.1
configurations.1.environment	.vscode/launch.json	/^            "environment": [],$/;"	a	object:configurations.1
configurations.1.externalConsole	.vscode/launch.json	/^            "externalConsole": false,$/;"	b	object:configurations.1
configurations.1.name	.vscode/launch.json	/^            "name": "Debug tests",$/;"	s	object:configurations.1
configurations.1.preLaunchTask	.vscode/launch.json	/^            "preLaunchTask": "CMake: build"$/;"	s	object:configurations.1
configurations.1.program	.vscode/launch.json	/^            "program": "${workspaceFolder}\/build\/bin\/tokenizer_tests",$/;"	s	object:configurations.1
configurations.1.request	.vscode/launch.json	/^            "request": "launch",$/;"	s	object:configurations.1
configurations.1.stopAtEntry	.vscode/launch.json	/^            "stopAtEntry": false,$/;"	b	object:configurations.1
configurations.1.type	.vscode/launch.json	/^            "type": "cppdbg",$/;"	s	object:configurations.1
configurations.2	.vscode/launch.json	/^        {$/;"	o	array:configurations
configurations.2.MIMode	.vscode/launch.json	/^            "MIMode": "lldb",$/;"	s	object:configurations.2
configurations.2.args	.vscode/launch.json	/^            "args": [],$/;"	a	object:configurations.2
configurations.2.cwd	.vscode/launch.json	/^            "cwd": "${workspaceFolder}",$/;"	s	object:configurations.2
configurations.2.environment	.vscode/launch.json	/^            "environment": [],$/;"	a	object:configurations.2
configurations.2.externalConsole	.vscode/launch.json	/^            "externalConsole": false,$/;"	b	object:configurations.2
configurations.2.internalConsoleOptions	.vscode/launch.json	/^            "internalConsoleOptions": "openOnSessionStart",$/;"	s	object:configurations.2
configurations.2.logging	.vscode/launch.json	/^            "logging": {$/;"	o	object:configurations.2
configurations.2.logging.programOutput	.vscode/launch.json	/^                "programOutput": true$/;"	b	object:configurations.2.logging
configurations.2.name	.vscode/launch.json	/^            "name": "Run tests",$/;"	s	object:configurations.2
configurations.2.preLaunchTask	.vscode/launch.json	/^            "preLaunchTask": "CMake: build",$/;"	s	object:configurations.2
configurations.2.program	.vscode/launch.json	/^            "program": "${workspaceFolder}\/build\/bin\/tokenizer_tests",$/;"	s	object:configurations.2
configurations.2.request	.vscode/launch.json	/^            "request": "launch",$/;"	s	object:configurations.2
configurations.2.setupCommands	.vscode/launch.json	/^            "setupCommands": [$/;"	a	object:configurations.2
configurations.2.setupCommands.0	.vscode/launch.json	/^                {$/;"	o	array:configurations.2.setupCommands
configurations.2.setupCommands.0.description	.vscode/launch.json	/^                    "description": "Continue execution",$/;"	s	object:configurations.2.setupCommands.0
configurations.2.setupCommands.0.ignoreFailures	.vscode/launch.json	/^                    "ignoreFailures": true$/;"	b	object:configurations.2.setupCommands.0
configurations.2.setupCommands.0.text	.vscode/launch.json	/^                    "text": "continue",$/;"	s	object:configurations.2.setupCommands.0
configurations.2.stopAtEntry	.vscode/launch.json	/^            "stopAtEntry": false,$/;"	b	object:configurations.2
configurations.2.type	.vscode/launch.json	/^            "type": "cppdbg",$/;"	s	object:configurations.2
cstdarg	.vscode/settings.json	/^        "cstdarg": "cpp",$/;"	s	object:files.associations
cstddef	.vscode/settings.json	/^        "cstddef": "cpp",$/;"	s	object:files.associations
cstdint	.vscode/settings.json	/^        "cstdint": "cpp",$/;"	s	object:files.associations
cstdio	.vscode/settings.json	/^        "cstdio": "cpp",$/;"	s	object:files.associations
cstdlib	.vscode/settings.json	/^        "cstdlib": "cpp",$/;"	s	object:files.associations
cstring	.vscode/settings.json	/^        "cstring": "cpp",$/;"	s	object:files.associations
ctime	.vscode/settings.json	/^        "ctime": "cpp",$/;"	s	object:files.associations
currentCharacter	src/Tokenizer.cpp	/^  char TokenizerState::currentCharacter() const noexcept {$/;"	f	class:jerry::TokenizerState	typeref:typename:char	signature:() const
currentCharacter	src/Tokenizer.h	/^    char currentCharacter() const noexcept;$/;"	p	class:jerry::TokenizerState	typeref:typename:char	access:public	signature:() const
cwchar	.vscode/settings.json	/^        "cwchar": "cpp",$/;"	s	object:files.associations
cwctype	.vscode/settings.json	/^        "cwctype": "cpp",$/;"	s	object:files.associations
cwd	.vscode/launch.json	/^            "cwd": "${workspaceFolder}",$/;"	s	object:configurations.0
cwd	.vscode/launch.json	/^            "cwd": "${workspaceFolder}",$/;"	s	object:configurations.1
cwd	.vscode/launch.json	/^            "cwd": "${workspaceFolder}",$/;"	s	object:configurations.2
cwd	.vscode/tasks.json	/^                "cwd": "${workspaceFolder}"$/;"	s	object:tasks.0.options
cwd	.vscode/tasks.json	/^                "cwd": "${workspaceFolder}"$/;"	s	object:tasks.1.options
cwd	.vscode/tasks.json	/^                "cwd": "${workspaceFolder}\/build"$/;"	s	object:tasks.2.options
default_target	build/Makefile	/^default_target: all$/;"	t
depend	build/Makefile	/^depend:$/;"	t
dependsOn	.vscode/tasks.json	/^            "dependsOn": [$/;"	a	object:tasks.1
dependsOn	.vscode/tasks.json	/^            "dependsOn": [$/;"	a	object:tasks.2
deque	.vscode/settings.json	/^        "deque": "cpp",$/;"	s	object:files.associations
description	.vscode/launch.json	/^                    "description": "Continue execution",$/;"	s	object:configurations.2.setupCommands.0
digit	src/Tokenizer.h	/^  static Tokenizer<uint> digit() {$/;"	f	namespace:jerry	typeref:typename:Tokenizer<uint>	signature:()
doubleQuote	src/Tokenizer.h	/^  static Tokenizer<char> doubleQuote() {$/;"	f	namespace:jerry	typeref:typename:Tokenizer<char>	signature:()
edit_cache	build/Makefile	/^edit_cache:$/;"	t
edit_cache/fast	build/Makefile	/^edit_cache\/fast: edit_cache$/;"	t
environment	.vscode/launch.json	/^            "environment": [],$/;"	a	object:configurations.0
environment	.vscode/launch.json	/^            "environment": [],$/;"	a	object:configurations.1
environment	.vscode/launch.json	/^            "environment": [],$/;"	a	object:configurations.2
execution	.vscode/settings.json	/^        "execution": "cpp",$/;"	s	object:files.associations
externalConsole	.vscode/launch.json	/^            "externalConsole": false,$/;"	b	object:configurations.0
externalConsole	.vscode/launch.json	/^            "externalConsole": false,$/;"	b	object:configurations.1
externalConsole	.vscode/launch.json	/^            "externalConsole": false,$/;"	b	object:configurations.2
fail	src/Tokenizer.h	/^  static Tokenizer<T> fail() {$/;"	f	namespace:jerry	typeref:typename:Tokenizer<T>	signature:()
files.associations	.vscode/settings.json	/^    "files.associations": {$/;"	o
files.associations.__bit_reference	.vscode/settings.json	/^        "__bit_reference": "cpp",$/;"	s	object:files.associations
files.associations.__hash_table	.vscode/settings.json	/^        "__hash_table": "cpp",$/;"	s	object:files.associations
files.associations.__locale	.vscode/settings.json	/^        "__locale": "cpp",$/;"	s	object:files.associations
files.associations.__node_handle	.vscode/settings.json	/^        "__node_handle": "cpp",$/;"	s	object:files.associations
files.associations.__split_buffer	.vscode/settings.json	/^        "__split_buffer": "cpp",$/;"	s	object:files.associations
files.associations.__threading_support	.vscode/settings.json	/^        "__threading_support": "cpp",$/;"	s	object:files.associations
files.associations.__tree	.vscode/settings.json	/^        "__tree": "cpp",$/;"	s	object:files.associations
files.associations.__verbose_abort	.vscode/settings.json	/^        "__verbose_abort": "cpp",$/;"	s	object:files.associations
files.associations.algorithm	.vscode/settings.json	/^        "algorithm": "cpp"$/;"	s	object:files.associations
files.associations.any	.vscode/settings.json	/^        "any": "cpp",$/;"	s	object:files.associations
files.associations.array	.vscode/settings.json	/^        "array": "cpp",$/;"	s	object:files.associations
files.associations.bitset	.vscode/settings.json	/^        "bitset": "cpp",$/;"	s	object:files.associations
files.associations.cctype	.vscode/settings.json	/^        "cctype": "cpp",$/;"	s	object:files.associations
files.associations.charconv	.vscode/settings.json	/^        "charconv": "cpp",$/;"	s	object:files.associations
files.associations.clocale	.vscode/settings.json	/^        "clocale": "cpp",$/;"	s	object:files.associations
files.associations.cmath	.vscode/settings.json	/^        "cmath": "cpp",$/;"	s	object:files.associations
files.associations.complex	.vscode/settings.json	/^        "complex": "cpp",$/;"	s	object:files.associations
files.associations.condition_variable	.vscode/settings.json	/^        "condition_variable": "cpp",$/;"	s	object:files.associations
files.associations.cstdarg	.vscode/settings.json	/^        "cstdarg": "cpp",$/;"	s	object:files.associations
files.associations.cstddef	.vscode/settings.json	/^        "cstddef": "cpp",$/;"	s	object:files.associations
files.associations.cstdint	.vscode/settings.json	/^        "cstdint": "cpp",$/;"	s	object:files.associations
files.associations.cstdio	.vscode/settings.json	/^        "cstdio": "cpp",$/;"	s	object:files.associations
files.associations.cstdlib	.vscode/settings.json	/^        "cstdlib": "cpp",$/;"	s	object:files.associations
files.associations.cstring	.vscode/settings.json	/^        "cstring": "cpp",$/;"	s	object:files.associations
files.associations.ctime	.vscode/settings.json	/^        "ctime": "cpp",$/;"	s	object:files.associations
files.associations.cwchar	.vscode/settings.json	/^        "cwchar": "cpp",$/;"	s	object:files.associations
files.associations.cwctype	.vscode/settings.json	/^        "cwctype": "cpp",$/;"	s	object:files.associations
files.associations.deque	.vscode/settings.json	/^        "deque": "cpp",$/;"	s	object:files.associations
files.associations.execution	.vscode/settings.json	/^        "execution": "cpp",$/;"	s	object:files.associations
files.associations.forward_list	.vscode/settings.json	/^        "forward_list": "cpp",$/;"	s	object:files.associations
files.associations.initializer_list	.vscode/settings.json	/^        "initializer_list": "cpp",$/;"	s	object:files.associations
files.associations.ios	.vscode/settings.json	/^        "ios": "cpp",$/;"	s	object:files.associations
files.associations.iosfwd	.vscode/settings.json	/^        "iosfwd": "cpp",$/;"	s	object:files.associations
files.associations.iostream	.vscode/settings.json	/^        "iostream": "cpp",$/;"	s	object:files.associations
files.associations.istream	.vscode/settings.json	/^        "istream": "cpp",$/;"	s	object:files.associations
files.associations.limits	.vscode/settings.json	/^        "limits": "cpp",$/;"	s	object:files.associations
files.associations.locale	.vscode/settings.json	/^        "locale": "cpp",$/;"	s	object:files.associations
files.associations.map	.vscode/settings.json	/^        "map": "cpp",$/;"	s	object:files.associations
files.associations.memory	.vscode/settings.json	/^        "memory": "cpp",$/;"	s	object:files.associations
files.associations.mutex	.vscode/settings.json	/^        "mutex": "cpp",$/;"	s	object:files.associations
files.associations.new	.vscode/settings.json	/^        "new": "cpp",$/;"	s	object:files.associations
files.associations.optional	.vscode/settings.json	/^        "optional": "cpp",$/;"	s	object:files.associations
files.associations.ostream	.vscode/settings.json	/^        "ostream": "cpp",$/;"	s	object:files.associations
files.associations.print	.vscode/settings.json	/^        "print": "cpp",$/;"	s	object:files.associations
files.associations.queue	.vscode/settings.json	/^        "queue": "cpp",$/;"	s	object:files.associations
files.associations.ratio	.vscode/settings.json	/^        "ratio": "cpp",$/;"	s	object:files.associations
files.associations.set	.vscode/settings.json	/^        "set": "cpp",$/;"	s	object:files.associations
files.associations.span	.vscode/settings.json	/^        "span": "cpp",$/;"	s	object:files.associations
files.associations.sstream	.vscode/settings.json	/^        "sstream": "cpp",$/;"	s	object:files.associations
files.associations.stack	.vscode/settings.json	/^        "stack": "cpp",$/;"	s	object:files.associations
files.associations.stdexcept	.vscode/settings.json	/^        "stdexcept": "cpp",$/;"	s	object:files.associations
files.associations.streambuf	.vscode/settings.json	/^        "streambuf": "cpp",$/;"	s	object:files.associations
files.associations.string	.vscode/settings.json	/^        "string": "cpp",$/;"	s	object:files.associations
files.associations.string_view	.vscode/settings.json	/^        "string_view": "cpp",$/;"	s	object:files.associations
files.associations.tuple	.vscode/settings.json	/^        "tuple": "cpp",$/;"	s	object:files.associations
files.associations.typeinfo	.vscode/settings.json	/^        "typeinfo": "cpp",$/;"	s	object:files.associations
files.associations.unordered_map	.vscode/settings.json	/^        "unordered_map": "cpp",$/;"	s	object:files.associations
files.associations.variant	.vscode/settings.json	/^        "variant": "cpp",$/;"	s	object:files.associations
files.associations.vector	.vscode/settings.json	/^        "vector": "cpp",$/;"	s	object:files.associations
forward_list	.vscode/settings.json	/^        "forward_list": "cpp",$/;"	s	object:files.associations
fromBool	src/JsonToken.h	/^        static JsonToken fromBool(bool b) {$/;"	f	struct:jerry::JsonToken	typeref:typename:JsonToken	access:public	signature:(bool b)
fromNumber	src/JsonToken.h	/^        static JsonToken fromNumber(double n) {$/;"	f	struct:jerry::JsonToken	typeref:typename:JsonToken	access:public	signature:(double n)
fromString	src/JsonToken.h	/^        static JsonToken fromString(const std::string& s) {$/;"	f	struct:jerry::JsonToken	typeref:typename:JsonToken	access:public	signature:(const std::string & s)
func	src/Tokenizer.h	/^    TokenizerFunc func;$/;"	m	class:jerry::Tokenizer	typeref:typename:TokenizerFunc	access:private
getInputString	src/Tokenizer.h	/^    std::string getInputString() const noexcept{$/;"	f	class:jerry::TokenizerState	typeref:typename:std::string	access:public	signature:() const
getInputStringSize	src/Tokenizer.h	/^    size_t getInputStringSize() const noexcept {$/;"	f	class:jerry::TokenizerState	typeref:typename:size_t	access:public	signature:() const
getPosition	src/Tokenizer.cpp	/^  size_t TokenizerState::getPosition() const noexcept {$/;"	f	class:jerry::TokenizerState	typeref:typename:size_t	signature:() const
getPosition	src/Tokenizer.h	/^    size_t getPosition() const noexcept;$/;"	p	class:jerry::TokenizerState	typeref:typename:size_t	access:public	signature:() const
group	.vscode/tasks.json	/^            "group": {$/;"	o	object:tasks.0
group	.vscode/tasks.json	/^            "group": {$/;"	o	object:tasks.1
group	.vscode/tasks.json	/^            "group": {$/;"	o	object:tasks.2
help	build/Makefile	/^help:$/;"	t
ignoreFailures	.vscode/launch.json	/^                    "ignoreFailures": true$/;"	b	object:configurations.2.setupCommands.0
info_arch	build/CMakeFiles/3.31.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v	typeref:typename:char const *
info_compiler	build/CMakeFiles/3.31.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v	typeref:typename:char const *
info_cray	build/CMakeFiles/3.31.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v	typeref:typename:char const *
info_language_extensions_default	build/CMakeFiles/3.31.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^const char* info_language_extensions_default = "INFO" ":" "extensions_default["$/;"	v	typeref:typename:const char *
info_language_standard_default	build/CMakeFiles/3.31.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^const char* info_language_standard_default = "INFO" ":" "standard_default["$/;"	v	typeref:typename:const char *
info_platform	build/CMakeFiles/3.31.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v	typeref:typename:char const *
info_simulate	build/CMakeFiles/3.31.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v	typeref:typename:char const *
info_simulate_version	build/CMakeFiles/3.31.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_simulate_version[] = {$/;"	v	typeref:typename:char const[]
info_version	build/CMakeFiles/3.31.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_version[] = {$/;"	v	typeref:typename:char const[]
info_version	build/CMakeFiles/3.31.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_version = "INFO" ":" "compiler_version[" COMPILER_VERSION "]";$/;"	v	typeref:typename:char const *
info_version_internal	build/CMakeFiles/3.31.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_version_internal[] = {$/;"	v	typeref:typename:char const[]
info_version_internal	build/CMakeFiles/3.31.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_version_internal = "INFO" ":" "compiler_version_internal[" COMPILER_VERSION_INT/;"	v	typeref:typename:char const *
init	src/Tokenizer.cpp	/^  TokenizerState TokenizerState::init(std::string s, size_t pos) {$/;"	f	class:jerry::TokenizerState	typeref:typename:TokenizerState	signature:(std::string s,size_t pos)
init	src/Tokenizer.h	/^    static Tokenizer<T> init(TokenizerFunc f) {$/;"	f	class:jerry::Tokenizer	typeref:typename:Tokenizer<T>	access:public	signature:(TokenizerFunc f)
init	src/Tokenizer.h	/^    static TokenizerState init(std::string s, size_t pos);$/;"	p	class:jerry::TokenizerState	typeref:typename:TokenizerState	access:public	signature:(std::string s,size_t pos)
initializer_list	.vscode/settings.json	/^        "initializer_list": "cpp",$/;"	s	object:files.associations
input	src/Tokenizer.h	/^    std::string input;$/;"	m	class:jerry::TokenizerState	typeref:typename:std::string	access:private
install	build/Makefile	/^install: preinstall$/;"	t
install/fast	build/Makefile	/^install\/fast: preinstall\/fast$/;"	t
install/local	build/Makefile	/^install\/local: preinstall$/;"	t
install/local/fast	build/Makefile	/^install\/local\/fast: preinstall\/fast$/;"	t
install/strip	build/Makefile	/^install\/strip: preinstall$/;"	t
install/strip/fast	build/Makefile	/^install\/strip\/fast: preinstall\/fast$/;"	t
internalConsoleOptions	.vscode/launch.json	/^            "internalConsoleOptions": "openOnSessionStart",$/;"	s	object:configurations.2
ios	.vscode/settings.json	/^        "ios": "cpp",$/;"	s	object:files.associations
iosfwd	.vscode/settings.json	/^        "iosfwd": "cpp",$/;"	s	object:files.associations
iostream	.vscode/settings.json	/^        "iostream": "cpp",$/;"	s	object:files.associations
isDefault	.vscode/tasks.json	/^                "isDefault": true$/;"	b	object:tasks.0.group
isDefault	.vscode/tasks.json	/^                "isDefault": true$/;"	b	object:tasks.1.group
isDefault	.vscode/tasks.json	/^                "isDefault": true$/;"	b	object:tasks.2.group
isDigit	src/Tokenizer.h	/^  static Tokenizer<char> isDigit(char c) {$/;"	f	namespace:jerry	typeref:typename:Tokenizer<char>	signature:(char c)
isEqual	src/Tokenizer.h	/^  static Tokenizer<T> isEqual(T value, T other) {$/;"	f	namespace:jerry	typeref:typename:Tokenizer<T>	signature:(T value,T other)
isNotEqual	src/Tokenizer.h	/^  static Tokenizer<T> isNotEqual(T value, T other) {$/;"	f	namespace:jerry	typeref:typename:Tokenizer<T>	signature:(T value,T other)
istream	.vscode/settings.json	/^        "istream": "cpp",$/;"	s	object:files.associations
jerry	CMakeLists.txt	/^add_executable(jerry$/;"	t
jerry	CMakeLists.txt	/^project(jerry VERSION 0.0.1 LANGUAGES CXX)$/;"	p
jerry	README.md	/^# jerry$/;"	c
jerry	build/Makefile	/^jerry: cmake_check_build_system$/;"	t
jerry	src/JsonToken.h	/^namespace jerry {$/;"	n
jerry	src/Tokenizer.cpp	/^namespace jerry {$/;"	n	file:
jerry	src/Tokenizer.h	/^namespace jerry {$/;"	n
jerry/fast	build/Makefile	/^jerry\/fast:$/;"	t
jerry::ArrayEnd	src/JsonToken.h	/^        ArrayEnd,$/;"	e	enum:jerry::JsonTokenType	access:public
jerry::ArrayStart	src/JsonToken.h	/^        ArrayStart,$/;"	e	enum:jerry::JsonTokenType	access:public
jerry::Boolean	src/JsonToken.h	/^        Boolean,$/;"	e	enum:jerry::JsonTokenType	access:public
jerry::Colon	src/JsonToken.h	/^        Colon,$/;"	e	enum:jerry::JsonTokenType	access:public
jerry::Comma	src/JsonToken.h	/^        Comma$/;"	e	enum:jerry::JsonTokenType	access:public
jerry::JsonToken	src/JsonToken.h	/^    struct JsonToken {$/;"	s	namespace:jerry
jerry::JsonToken::fromBool	src/JsonToken.h	/^        static JsonToken fromBool(bool b) {$/;"	f	struct:jerry::JsonToken	typeref:typename:JsonToken	access:public	signature:(bool b)
jerry::JsonToken::fromNumber	src/JsonToken.h	/^        static JsonToken fromNumber(double n) {$/;"	f	struct:jerry::JsonToken	typeref:typename:JsonToken	access:public	signature:(double n)
jerry::JsonToken::fromString	src/JsonToken.h	/^        static JsonToken fromString(const std::string& s) {$/;"	f	struct:jerry::JsonToken	typeref:typename:JsonToken	access:public	signature:(const std::string & s)
jerry::JsonToken::makeNull	src/JsonToken.h	/^        static JsonToken makeNull() {$/;"	f	struct:jerry::JsonToken	typeref:typename:JsonToken	access:public	signature:()
jerry::JsonToken::makeStructural	src/JsonToken.h	/^        static JsonToken makeStructural(JsonTokenType type) {$/;"	f	struct:jerry::JsonToken	typeref:typename:JsonToken	access:public	signature:(JsonTokenType type)
jerry::JsonToken::operator ==	src/JsonToken.h	/^        bool operator==(const JsonToken& other) const {$/;"	f	struct:jerry::JsonToken	typeref:typename:bool	access:public	signature:(const JsonToken & other) const
jerry::JsonToken::toString	src/JsonToken.h	/^        std::string toString() const {$/;"	f	struct:jerry::JsonToken	typeref:typename:std::string	access:public	signature:() const
jerry::JsonToken::type	src/JsonToken.h	/^        JsonTokenType type;$/;"	m	struct:jerry::JsonToken	typeref:typename:JsonTokenType	access:public
jerry::JsonToken::value	src/JsonToken.h	/^        std::variant<std::monostate, std::string, double, bool> value;$/;"	m	struct:jerry::JsonToken	typeref:typename:std::variant<std::monostate,std::string,double,bool>	access:public
jerry::JsonTokenType	src/JsonToken.h	/^    enum class JsonTokenType {$/;"	g	namespace:jerry
jerry::Null	src/JsonToken.h	/^        Null,$/;"	e	enum:jerry::JsonTokenType	access:public
jerry::Number	src/JsonToken.h	/^        Number,$/;"	e	enum:jerry::JsonTokenType	access:public
jerry::ObjectEnd	src/JsonToken.h	/^        ObjectEnd,$/;"	e	enum:jerry::JsonTokenType	access:public
jerry::ObjectStart	src/JsonToken.h	/^        ObjectStart,  $/;"	e	enum:jerry::JsonTokenType	access:public
jerry::String	src/JsonToken.h	/^        String,$/;"	e	enum:jerry::JsonTokenType	access:public
jerry::Tokenizer	src/Tokenizer.h	/^  class Tokenizer {$/;"	c	namespace:jerry
jerry::Tokenizer::Tokenizer	src/Tokenizer.h	/^    explicit Tokenizer(TokenizerFunc f): func(f) {};$/;"	f	class:jerry::Tokenizer	access:public	signature:(TokenizerFunc f)
jerry::Tokenizer::TokenizerFunc	src/Tokenizer.h	/^    using TokenizerFunc = std::function<std::optional<std::pair<T, TokenizerState>>(TokenizerSta/;"	t	class:jerry::Tokenizer	access:private
jerry::Tokenizer::bind	src/Tokenizer.h	/^    Tokenizer<U> bind(std::function<Tokenizer<U>(T)> f) const {$/;"	f	class:jerry::Tokenizer	typeref:typename:Tokenizer<U>	access:public	signature:(std::function<Tokenizer<U> (T)> f) const
jerry::Tokenizer::func	src/Tokenizer.h	/^    TokenizerFunc func;$/;"	m	class:jerry::Tokenizer	typeref:typename:TokenizerFunc	access:private
jerry::Tokenizer::init	src/Tokenizer.h	/^    static Tokenizer<T> init(TokenizerFunc f) {$/;"	f	class:jerry::Tokenizer	typeref:typename:Tokenizer<T>	access:public	signature:(TokenizerFunc f)
jerry::Tokenizer::map	src/Tokenizer.h	/^    Tokenizer<U> map(std::function<U(T)> f) const {$/;"	f	class:jerry::Tokenizer	typeref:typename:Tokenizer<U>	access:public	signature:(std::function<U (T)> f) const
jerry::Tokenizer::run	src/Tokenizer.h	/^    std::optional<std::pair<T, TokenizerState>> run(TokenizerState s) const {$/;"	f	class:jerry::Tokenizer	typeref:typename:std::optional<std::pair<T,TokenizerState>>	access:public	signature:(TokenizerState s) const
jerry::TokenizerState	src/Tokenizer.h	/^  class TokenizerState {$/;"	c	namespace:jerry
jerry::TokenizerState::TokenizerState	src/Tokenizer.cpp	/^  TokenizerState::TokenizerState(std::string s, size_t pos) : input(s), position(pos){};$/;"	f	class:jerry::TokenizerState	signature:(std::string s,size_t pos)
jerry::TokenizerState::TokenizerState	src/Tokenizer.h	/^    explicit TokenizerState(std::string s, size_t pos);$/;"	p	class:jerry::TokenizerState	access:public	signature:(std::string s,size_t pos)
jerry::TokenizerState::advance	src/Tokenizer.cpp	/^  TokenizerState TokenizerState::advance() const {$/;"	f	class:jerry::TokenizerState	typeref:typename:TokenizerState	signature:() const
jerry::TokenizerState::advance	src/Tokenizer.h	/^    TokenizerState advance() const;$/;"	p	class:jerry::TokenizerState	typeref:typename:TokenizerState	access:public	signature:() const
jerry::TokenizerState::currentCharacter	src/Tokenizer.cpp	/^  char TokenizerState::currentCharacter() const noexcept {$/;"	f	class:jerry::TokenizerState	typeref:typename:char	signature:() const
jerry::TokenizerState::currentCharacter	src/Tokenizer.h	/^    char currentCharacter() const noexcept;$/;"	p	class:jerry::TokenizerState	typeref:typename:char	access:public	signature:() const
jerry::TokenizerState::getInputString	src/Tokenizer.h	/^    std::string getInputString() const noexcept{$/;"	f	class:jerry::TokenizerState	typeref:typename:std::string	access:public	signature:() const
jerry::TokenizerState::getInputStringSize	src/Tokenizer.h	/^    size_t getInputStringSize() const noexcept {$/;"	f	class:jerry::TokenizerState	typeref:typename:size_t	access:public	signature:() const
jerry::TokenizerState::getPosition	src/Tokenizer.cpp	/^  size_t TokenizerState::getPosition() const noexcept {$/;"	f	class:jerry::TokenizerState	typeref:typename:size_t	signature:() const
jerry::TokenizerState::getPosition	src/Tokenizer.h	/^    size_t getPosition() const noexcept;$/;"	p	class:jerry::TokenizerState	typeref:typename:size_t	access:public	signature:() const
jerry::TokenizerState::init	src/Tokenizer.cpp	/^  TokenizerState TokenizerState::init(std::string s, size_t pos) {$/;"	f	class:jerry::TokenizerState	typeref:typename:TokenizerState	signature:(std::string s,size_t pos)
jerry::TokenizerState::init	src/Tokenizer.h	/^    static TokenizerState init(std::string s, size_t pos);$/;"	p	class:jerry::TokenizerState	typeref:typename:TokenizerState	access:public	signature:(std::string s,size_t pos)
jerry::TokenizerState::input	src/Tokenizer.h	/^    std::string input;$/;"	m	class:jerry::TokenizerState	typeref:typename:std::string	access:private
jerry::TokenizerState::position	src/Tokenizer.h	/^    size_t position;$/;"	m	class:jerry::TokenizerState	typeref:typename:size_t	access:private
jerry::arrayEnd	src/Tokenizer.h	/^  static Tokenizer<JsonToken> arrayEnd() {$/;"	f	namespace:jerry	typeref:typename:Tokenizer<JsonToken>	signature:()
jerry::arrayStart	src/Tokenizer.h	/^  static Tokenizer<JsonToken> arrayStart() {$/;"	f	namespace:jerry	typeref:typename:Tokenizer<JsonToken>	signature:()
jerry::braceClose	src/Tokenizer.h	/^  static Tokenizer<char> braceClose() {$/;"	f	namespace:jerry	typeref:typename:Tokenizer<char>	signature:()
jerry::braceOpen	src/Tokenizer.h	/^  static Tokenizer<char> braceOpen() {$/;"	f	namespace:jerry	typeref:typename:Tokenizer<char>	signature:()
jerry::bracketClose	src/Tokenizer.h	/^  static Tokenizer<char> bracketClose() {$/;"	f	namespace:jerry	typeref:typename:Tokenizer<char>	signature:()
jerry::bracketOpen	src/Tokenizer.h	/^  static Tokenizer<char> bracketOpen() {$/;"	f	namespace:jerry	typeref:typename:Tokenizer<char>	signature:()
jerry::character	src/Tokenizer.h	/^  static Tokenizer<char> character() {$/;"	f	namespace:jerry	typeref:typename:Tokenizer<char>	signature:()
jerry::colon	src/Tokenizer.h	/^  static Tokenizer<char> colon() {$/;"	f	namespace:jerry	typeref:typename:Tokenizer<char>	signature:()
jerry::comma	src/Tokenizer.h	/^  static Tokenizer<char> comma() {$/;"	f	namespace:jerry	typeref:typename:Tokenizer<char>	signature:()
jerry::digit	src/Tokenizer.h	/^  static Tokenizer<uint> digit() {$/;"	f	namespace:jerry	typeref:typename:Tokenizer<uint>	signature:()
jerry::doubleQuote	src/Tokenizer.h	/^  static Tokenizer<char> doubleQuote() {$/;"	f	namespace:jerry	typeref:typename:Tokenizer<char>	signature:()
jerry::fail	src/Tokenizer.h	/^  static Tokenizer<T> fail() {$/;"	f	namespace:jerry	typeref:typename:Tokenizer<T>	signature:()
jerry::isDigit	src/Tokenizer.h	/^  static Tokenizer<char> isDigit(char c) {$/;"	f	namespace:jerry	typeref:typename:Tokenizer<char>	signature:(char c)
jerry::isEqual	src/Tokenizer.h	/^  static Tokenizer<T> isEqual(T value, T other) {$/;"	f	namespace:jerry	typeref:typename:Tokenizer<T>	signature:(T value,T other)
jerry::isNotEqual	src/Tokenizer.h	/^  static Tokenizer<T> isNotEqual(T value, T other) {$/;"	f	namespace:jerry	typeref:typename:Tokenizer<T>	signature:(T value,T other)
jerry::jsonString	src/Tokenizer.h	/^  static Tokenizer<JsonToken> jsonString() {$/;"	f	namespace:jerry	typeref:typename:Tokenizer<JsonToken>	signature:()
jerry::manyOf	src/Tokenizer.h	/^  static Tokenizer<std::vector<T>> manyOf(Tokenizer<T> x) {$/;"	f	namespace:jerry	typeref:typename:Tokenizer<std::vector<T>>	signature:(Tokenizer<T> x)
jerry::match	src/Tokenizer.h	/^  static Tokenizer<T> match(T value, std::function<bool(T)> matcher) {$/;"	f	namespace:jerry	typeref:typename:Tokenizer<T>	signature:(T value,std::function<bool (T)> matcher)
jerry::objectEnd	src/Tokenizer.h	/^  static Tokenizer<JsonToken> objectEnd() {$/;"	f	namespace:jerry	typeref:typename:Tokenizer<JsonToken>	signature:()
jerry::objectStart	src/Tokenizer.h	/^  static Tokenizer<JsonToken> objectStart() {$/;"	f	namespace:jerry	typeref:typename:Tokenizer<JsonToken>	signature:()
jerry::operator <<	src/JsonToken.h	/^    inline std::ostream& operator<<(std::ostream& os, const JsonToken& token) {$/;"	f	namespace:jerry	typeref:typename:std::ostream &	signature:(std::ostream & os,const JsonToken & token)
jerry::orElse	src/Tokenizer.h	/^  static Tokenizer<T> orElse(Tokenizer<T> x, Tokenizer<T> y) {$/;"	f	namespace:jerry	typeref:typename:Tokenizer<T>	signature:(Tokenizer<T> x,Tokenizer<T> y)
jerry::pure	src/Tokenizer.h	/^  static Tokenizer<T> pure(T value) {$/;"	f	namespace:jerry	typeref:typename:Tokenizer<T>	signature:(T value)
jerry::sentence	src/Tokenizer.h	/^  static Tokenizer<std::vector<std::string>> sentence() {$/;"	f	namespace:jerry	typeref:typename:Tokenizer<std::vector<std::string>>	signature:()
jerry::whitespace	src/Tokenizer.h	/^  static Tokenizer<char> whitespace() {$/;"	f	namespace:jerry	typeref:typename:Tokenizer<char>	signature:()
jerry::word	src/Tokenizer.h	/^  static Tokenizer<std::string> word() {$/;"	f	namespace:jerry	typeref:typename:Tokenizer<std::string>	signature:()
jsonString	src/Tokenizer.h	/^  static Tokenizer<JsonToken> jsonString() {$/;"	f	namespace:jerry	typeref:typename:Tokenizer<JsonToken>	signature:()
kind	.vscode/tasks.json	/^                "kind": "build",$/;"	s	object:tasks.0.group
kind	.vscode/tasks.json	/^                "kind": "build",$/;"	s	object:tasks.1.group
kind	.vscode/tasks.json	/^                "kind": "test",$/;"	s	object:tasks.2.group
label	.vscode/tasks.json	/^            "label": "CMake: build",$/;"	s	object:tasks.1
label	.vscode/tasks.json	/^            "label": "CMake: configure",$/;"	s	object:tasks.0
label	.vscode/tasks.json	/^            "label": "CMake: test",$/;"	s	object:tasks.2
limits	.vscode/settings.json	/^        "limits": "cpp",$/;"	s	object:files.associations
list_install_components	build/Makefile	/^list_install_components:$/;"	t
list_install_components/fast	build/Makefile	/^list_install_components\/fast: list_install_components$/;"	t
locale	.vscode/settings.json	/^        "locale": "cpp",$/;"	s	object:files.associations
logging	.vscode/launch.json	/^            "logging": {$/;"	o	object:configurations.2
main	build/CMakeFiles/3.31.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^int main(int argc, char* argv[])$/;"	f	typeref:typename:int	signature:(int argc,char * argv[])
main	src/main.cpp	/^int main() {$/;"	f	typeref:typename:int	signature:()
makeNull	src/JsonToken.h	/^        static JsonToken makeNull() {$/;"	f	struct:jerry::JsonToken	typeref:typename:JsonToken	access:public	signature:()
makeStructural	src/JsonToken.h	/^        static JsonToken makeStructural(JsonTokenType type) {$/;"	f	struct:jerry::JsonToken	typeref:typename:JsonToken	access:public	signature:(JsonTokenType type)
manyOf	src/Tokenizer.h	/^  static Tokenizer<std::vector<T>> manyOf(Tokenizer<T> x) {$/;"	f	namespace:jerry	typeref:typename:Tokenizer<std::vector<T>>	signature:(Tokenizer<T> x)
map	.vscode/settings.json	/^        "map": "cpp",$/;"	s	object:files.associations
map	src/Tokenizer.h	/^    Tokenizer<U> map(std::function<U(T)> f) const {$/;"	f	class:jerry::Tokenizer	typeref:typename:Tokenizer<U>	access:public	signature:(std::function<U (T)> f) const
match	src/Tokenizer.h	/^  static Tokenizer<T> match(T value, std::function<bool(T)> matcher) {$/;"	f	namespace:jerry	typeref:typename:Tokenizer<T>	signature:(T value,std::function<bool (T)> matcher)
memory	.vscode/settings.json	/^        "memory": "cpp",$/;"	s	object:files.associations
mutex	.vscode/settings.json	/^        "mutex": "cpp",$/;"	s	object:files.associations
name	.vscode/launch.json	/^            "name": "Debug jerry",$/;"	s	object:configurations.0
name	.vscode/launch.json	/^            "name": "Debug tests",$/;"	s	object:configurations.1
name	.vscode/launch.json	/^            "name": "Run tests",$/;"	s	object:configurations.2
new	.vscode/settings.json	/^        "new": "cpp",$/;"	s	object:files.associations
objectEnd	src/Tokenizer.h	/^  static Tokenizer<JsonToken> objectEnd() {$/;"	f	namespace:jerry	typeref:typename:Tokenizer<JsonToken>	signature:()
objectStart	src/Tokenizer.h	/^  static Tokenizer<JsonToken> objectStart() {$/;"	f	namespace:jerry	typeref:typename:Tokenizer<JsonToken>	signature:()
operator <<	src/JsonToken.h	/^    inline std::ostream& operator<<(std::ostream& os, const JsonToken& token) {$/;"	f	namespace:jerry	typeref:typename:std::ostream &	signature:(std::ostream & os,const JsonToken & token)
operator ==	src/JsonToken.h	/^        bool operator==(const JsonToken& other) const {$/;"	f	struct:jerry::JsonToken	typeref:typename:bool	access:public	signature:(const JsonToken & other) const
optional	.vscode/settings.json	/^        "optional": "cpp",$/;"	s	object:files.associations
options	.vscode/tasks.json	/^            "options": {$/;"	o	object:tasks.0
options	.vscode/tasks.json	/^            "options": {$/;"	o	object:tasks.1
options	.vscode/tasks.json	/^            "options": {$/;"	o	object:tasks.2
orElse	src/Tokenizer.h	/^  static Tokenizer<T> orElse(Tokenizer<T> x, Tokenizer<T> y) {$/;"	f	namespace:jerry	typeref:typename:Tokenizer<T>	signature:(Tokenizer<T> x,Tokenizer<T> y)
ostream	.vscode/settings.json	/^        "ostream": "cpp",$/;"	s	object:files.associations
position	src/Tokenizer.h	/^    size_t position;$/;"	m	class:jerry::TokenizerState	typeref:typename:size_t	access:private
preLaunchTask	.vscode/launch.json	/^            "preLaunchTask": "CMake: build"$/;"	s	object:configurations.0
preLaunchTask	.vscode/launch.json	/^            "preLaunchTask": "CMake: build"$/;"	s	object:configurations.1
preLaunchTask	.vscode/launch.json	/^            "preLaunchTask": "CMake: build",$/;"	s	object:configurations.2
preinstall	build/Makefile	/^preinstall: all$/;"	t
preinstall/fast	build/Makefile	/^preinstall\/fast:$/;"	t
print	.vscode/settings.json	/^        "print": "cpp",$/;"	s	object:files.associations
problemMatcher	.vscode/tasks.json	/^            "problemMatcher": [],$/;"	a	object:tasks.0
problemMatcher	.vscode/tasks.json	/^            "problemMatcher": [],$/;"	a	object:tasks.1
problemMatcher	.vscode/tasks.json	/^            "problemMatcher": [],$/;"	a	object:tasks.2
program	.vscode/launch.json	/^            "program": "${workspaceFolder}\/build\/bin\/tokenizer_tests",$/;"	s	object:configurations.1
program	.vscode/launch.json	/^            "program": "${workspaceFolder}\/build\/bin\/tokenizer_tests",$/;"	s	object:configurations.2
program	.vscode/launch.json	/^            "program": "${workspaceFolder}\/build\/jerry",$/;"	s	object:configurations.0
programOutput	.vscode/launch.json	/^                "programOutput": true$/;"	b	object:configurations.2.logging
pure	src/Tokenizer.h	/^  static Tokenizer<T> pure(T value) {$/;"	f	namespace:jerry	typeref:typename:Tokenizer<T>	signature:(T value)
qnxnto	build/CMakeFiles/3.31.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v	typeref:typename:char const *
queue	.vscode/settings.json	/^        "queue": "cpp",$/;"	s	object:files.associations
ratio	.vscode/settings.json	/^        "ratio": "cpp",$/;"	s	object:files.associations
rebuild_cache	build/Makefile	/^rebuild_cache:$/;"	t
rebuild_cache/fast	build/Makefile	/^rebuild_cache\/fast: rebuild_cache$/;"	t
request	.vscode/launch.json	/^            "request": "launch",$/;"	s	object:configurations.0
request	.vscode/launch.json	/^            "request": "launch",$/;"	s	object:configurations.1
request	.vscode/launch.json	/^            "request": "launch",$/;"	s	object:configurations.2
run	src/Tokenizer.h	/^    std::optional<std::pair<T, TokenizerState>> run(TokenizerState s) const {$/;"	f	class:jerry::Tokenizer	typeref:typename:std::optional<std::pair<T,TokenizerState>>	access:public	signature:(TokenizerState s) const
sentence	src/Tokenizer.h	/^  static Tokenizer<std::vector<std::string>> sentence() {$/;"	f	namespace:jerry	typeref:typename:Tokenizer<std::vector<std::string>>	signature:()
set	.vscode/settings.json	/^        "set": "cpp",$/;"	s	object:files.associations
setupCommands	.vscode/launch.json	/^            "setupCommands": [$/;"	a	object:configurations.2
span	.vscode/settings.json	/^        "span": "cpp",$/;"	s	object:files.associations
src/Tokenizer.cpp.i	build/Makefile	/^src\/Tokenizer.cpp.i:$/;"	t
src/Tokenizer.cpp.o	build/Makefile	/^src\/Tokenizer.cpp.o:$/;"	t
src/Tokenizer.cpp.s	build/Makefile	/^src\/Tokenizer.cpp.s:$/;"	t
src/Tokenizer.i	build/Makefile	/^src\/Tokenizer.i: src\/Tokenizer.cpp.i$/;"	t
src/Tokenizer.o	build/Makefile	/^src\/Tokenizer.o: src\/Tokenizer.cpp.o$/;"	t
src/Tokenizer.s	build/Makefile	/^src\/Tokenizer.s: src\/Tokenizer.cpp.s$/;"	t
src/main.cpp.i	build/Makefile	/^src\/main.cpp.i:$/;"	t
src/main.cpp.o	build/Makefile	/^src\/main.cpp.o:$/;"	t
src/main.cpp.s	build/Makefile	/^src\/main.cpp.s:$/;"	t
src/main.i	build/Makefile	/^src\/main.i: src\/main.cpp.i$/;"	t
src/main.o	build/Makefile	/^src\/main.o: src\/main.cpp.o$/;"	t
src/main.s	build/Makefile	/^src\/main.s: src\/main.cpp.s$/;"	t
sstream	.vscode/settings.json	/^        "sstream": "cpp",$/;"	s	object:files.associations
stack	.vscode/settings.json	/^        "stack": "cpp",$/;"	s	object:files.associations
stdexcept	.vscode/settings.json	/^        "stdexcept": "cpp",$/;"	s	object:files.associations
stopAtEntry	.vscode/launch.json	/^            "stopAtEntry": false,$/;"	b	object:configurations.0
stopAtEntry	.vscode/launch.json	/^            "stopAtEntry": false,$/;"	b	object:configurations.1
stopAtEntry	.vscode/launch.json	/^            "stopAtEntry": false,$/;"	b	object:configurations.2
streambuf	.vscode/settings.json	/^        "streambuf": "cpp",$/;"	s	object:files.associations
string	.vscode/settings.json	/^        "string": "cpp",$/;"	s	object:files.associations
string_view	.vscode/settings.json	/^        "string_view": "cpp",$/;"	s	object:files.associations
tasks	.vscode/tasks.json	/^    "tasks": [$/;"	a
tasks.0	.vscode/tasks.json	/^        {$/;"	o	array:tasks
tasks.0.args	.vscode/tasks.json	/^            "args": [$/;"	a	object:tasks.0
tasks.0.args.0	.vscode/tasks.json	/^                "-B",$/;"	s	array:tasks.0.args
tasks.0.args.1	.vscode/tasks.json	/^                "${workspaceFolder}\/build",$/;"	s	array:tasks.0.args
tasks.0.args.2	.vscode/tasks.json	/^                "-S",$/;"	s	array:tasks.0.args
tasks.0.args.3	.vscode/tasks.json	/^                "${workspaceFolder}"$/;"	s	array:tasks.0.args
tasks.0.command	.vscode/tasks.json	/^            "command": "cmake",$/;"	s	object:tasks.0
tasks.0.group	.vscode/tasks.json	/^            "group": {$/;"	o	object:tasks.0
tasks.0.group.isDefault	.vscode/tasks.json	/^                "isDefault": true$/;"	b	object:tasks.0.group
tasks.0.group.kind	.vscode/tasks.json	/^                "kind": "build",$/;"	s	object:tasks.0.group
tasks.0.label	.vscode/tasks.json	/^            "label": "CMake: configure",$/;"	s	object:tasks.0
tasks.0.options	.vscode/tasks.json	/^            "options": {$/;"	o	object:tasks.0
tasks.0.options.cwd	.vscode/tasks.json	/^                "cwd": "${workspaceFolder}"$/;"	s	object:tasks.0.options
tasks.0.problemMatcher	.vscode/tasks.json	/^            "problemMatcher": [],$/;"	a	object:tasks.0
tasks.1	.vscode/tasks.json	/^        {$/;"	o	array:tasks
tasks.1.args	.vscode/tasks.json	/^            "args": [$/;"	a	object:tasks.1
tasks.1.args.0	.vscode/tasks.json	/^                "--build",$/;"	s	array:tasks.1.args
tasks.1.args.1	.vscode/tasks.json	/^                "${workspaceFolder}\/build"$/;"	s	array:tasks.1.args
tasks.1.command	.vscode/tasks.json	/^            "command": "cmake",$/;"	s	object:tasks.1
tasks.1.dependsOn	.vscode/tasks.json	/^            "dependsOn": [$/;"	a	object:tasks.1
tasks.1.dependsOn.0	.vscode/tasks.json	/^                "CMake: configure"$/;"	s	array:tasks.1.dependsOn
tasks.1.group	.vscode/tasks.json	/^            "group": {$/;"	o	object:tasks.1
tasks.1.group.isDefault	.vscode/tasks.json	/^                "isDefault": true$/;"	b	object:tasks.1.group
tasks.1.group.kind	.vscode/tasks.json	/^                "kind": "build",$/;"	s	object:tasks.1.group
tasks.1.label	.vscode/tasks.json	/^            "label": "CMake: build",$/;"	s	object:tasks.1
tasks.1.options	.vscode/tasks.json	/^            "options": {$/;"	o	object:tasks.1
tasks.1.options.cwd	.vscode/tasks.json	/^                "cwd": "${workspaceFolder}"$/;"	s	object:tasks.1.options
tasks.1.problemMatcher	.vscode/tasks.json	/^            "problemMatcher": [],$/;"	a	object:tasks.1
tasks.2	.vscode/tasks.json	/^        {$/;"	o	array:tasks
tasks.2.args	.vscode/tasks.json	/^            "args": [$/;"	a	object:tasks.2
tasks.2.args.0	.vscode/tasks.json	/^                "--test-dir",$/;"	s	array:tasks.2.args
tasks.2.args.1	.vscode/tasks.json	/^                "${workspaceFolder}\/build"$/;"	s	array:tasks.2.args
tasks.2.command	.vscode/tasks.json	/^            "command": "ctest",$/;"	s	object:tasks.2
tasks.2.dependsOn	.vscode/tasks.json	/^            "dependsOn": [$/;"	a	object:tasks.2
tasks.2.dependsOn.0	.vscode/tasks.json	/^                "CMake: build"$/;"	s	array:tasks.2.dependsOn
tasks.2.group	.vscode/tasks.json	/^            "group": {$/;"	o	object:tasks.2
tasks.2.group.isDefault	.vscode/tasks.json	/^                "isDefault": true$/;"	b	object:tasks.2.group
tasks.2.group.kind	.vscode/tasks.json	/^                "kind": "test",$/;"	s	object:tasks.2.group
tasks.2.label	.vscode/tasks.json	/^            "label": "CMake: test",$/;"	s	object:tasks.2
tasks.2.options	.vscode/tasks.json	/^            "options": {$/;"	o	object:tasks.2
tasks.2.options.cwd	.vscode/tasks.json	/^                "cwd": "${workspaceFolder}\/build"$/;"	s	object:tasks.2.options
tasks.2.problemMatcher	.vscode/tasks.json	/^            "problemMatcher": [],$/;"	a	object:tasks.2
test	build/Makefile	/^test:$/;"	t
test/TokenizerStateTest.cpp.i	build/Makefile	/^test\/TokenizerStateTest.cpp.i:$/;"	t
test/TokenizerStateTest.cpp.o	build/Makefile	/^test\/TokenizerStateTest.cpp.o:$/;"	t
test/TokenizerStateTest.cpp.s	build/Makefile	/^test\/TokenizerStateTest.cpp.s:$/;"	t
test/TokenizerStateTest.i	build/Makefile	/^test\/TokenizerStateTest.i: test\/TokenizerStateTest.cpp.i$/;"	t
test/TokenizerStateTest.o	build/Makefile	/^test\/TokenizerStateTest.o: test\/TokenizerStateTest.cpp.o$/;"	t
test/TokenizerStateTest.s	build/Makefile	/^test\/TokenizerStateTest.s: test\/TokenizerStateTest.cpp.s$/;"	t
test/TokenizerTest.cpp.i	build/Makefile	/^test\/TokenizerTest.cpp.i:$/;"	t
test/TokenizerTest.cpp.o	build/Makefile	/^test\/TokenizerTest.cpp.o:$/;"	t
test/TokenizerTest.cpp.s	build/Makefile	/^test\/TokenizerTest.cpp.s:$/;"	t
test/TokenizerTest.i	build/Makefile	/^test\/TokenizerTest.i: test\/TokenizerTest.cpp.i$/;"	t
test/TokenizerTest.o	build/Makefile	/^test\/TokenizerTest.o: test\/TokenizerTest.cpp.o$/;"	t
test/TokenizerTest.s	build/Makefile	/^test\/TokenizerTest.s: test\/TokenizerTest.cpp.s$/;"	t
test/fast	build/Makefile	/^test\/fast: test$/;"	t
text	.vscode/launch.json	/^                    "text": "continue",$/;"	s	object:configurations.2.setupCommands.0
toString	src/JsonToken.h	/^        std::string toString() const {$/;"	f	struct:jerry::JsonToken	typeref:typename:std::string	access:public	signature:() const
tokenizer_tests	CMakeLists.txt	/^add_executable(tokenizer_tests$/;"	t
tokenizer_tests	build/Makefile	/^tokenizer_tests: cmake_check_build_system$/;"	t
tokenizer_tests/fast	build/Makefile	/^tokenizer_tests\/fast:$/;"	t
tokenizer_tests_TESTS	build/tokenizer_tests[1]_tests.cmake	/^set(  tokenizer_tests_TESTS TokenizerTest.TokenizerExampleTest TokenizerTest.PureTest TokenizerT/;"	v
tuple	.vscode/settings.json	/^        "tuple": "cpp",$/;"	s	object:files.associations
type	.vscode/launch.json	/^            "type": "cppdbg",$/;"	s	object:configurations.0
type	.vscode/launch.json	/^            "type": "cppdbg",$/;"	s	object:configurations.1
type	.vscode/launch.json	/^            "type": "cppdbg",$/;"	s	object:configurations.2
type	src/JsonToken.h	/^        JsonTokenType type;$/;"	m	struct:jerry::JsonToken	typeref:typename:JsonTokenType	access:public
typeinfo	.vscode/settings.json	/^        "typeinfo": "cpp",$/;"	s	object:files.associations
unordered_map	.vscode/settings.json	/^        "unordered_map": "cpp",$/;"	s	object:files.associations
value	src/JsonToken.h	/^        std::variant<std::monostate, std::string, double, bool> value;$/;"	m	struct:jerry::JsonToken	typeref:typename:std::variant<std::monostate,std::string,double,bool>	access:public
variant	.vscode/settings.json	/^        "variant": "cpp",$/;"	s	object:files.associations
vector	.vscode/settings.json	/^        "vector": "cpp",$/;"	s	object:files.associations
version	.vscode/launch.json	/^    "version": "0.2.0",$/;"	s
version	.vscode/tasks.json	/^    "version": "2.0.0",$/;"	s
whitespace	src/Tokenizer.h	/^  static Tokenizer<char> whitespace() {$/;"	f	namespace:jerry	typeref:typename:Tokenizer<char>	signature:()
word	src/Tokenizer.h	/^  static Tokenizer<std::string> word() {$/;"	f	namespace:jerry	typeref:typename:Tokenizer<std::string>	signature:()
